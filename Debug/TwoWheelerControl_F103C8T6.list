
TwoWheelerControl_F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005498  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  080055a4  080055a4  000155a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005754  08005754  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08005754  08005754  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005754  08005754  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005754  08005754  00015754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005758  08005758  00015758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800575c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  200000d0  0800582c  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  0800582c  00020644  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119c1  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ea  00000000  00000000  00031aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00033fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  00034fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001944b  00000000  00000000  00035ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138f1  00000000  00000000  0004f333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e310  00000000  00000000  00062c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0f34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004adc  00000000  00000000  000f0f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d0 	.word	0x200000d0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800558c 	.word	0x0800558c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d4 	.word	0x200000d4
 8000148:	0800558c 	.word	0x0800558c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	3a01      	subs	r2, #1
 8000a42:	bf28      	it	cs
 8000a44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a48:	d2ed      	bcs.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_fmul>:
 8000ba4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bac:	bf1e      	ittt	ne
 8000bae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb2:	ea92 0f0c 	teqne	r2, ip
 8000bb6:	ea93 0f0c 	teqne	r3, ip
 8000bba:	d06f      	beq.n	8000c9c <__aeabi_fmul+0xf8>
 8000bbc:	441a      	add	r2, r3
 8000bbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc2:	0240      	lsls	r0, r0, #9
 8000bc4:	bf18      	it	ne
 8000bc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bca:	d01e      	beq.n	8000c0a <__aeabi_fmul+0x66>
 8000bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be4:	bf3e      	ittt	cc
 8000be6:	0049      	lslcc	r1, r1, #1
 8000be8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	ea40 0001 	orr.w	r0, r0, r1
 8000bf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf6:	2afd      	cmp	r2, #253	; 0xfd
 8000bf8:	d81d      	bhi.n	8000c36 <__aeabi_fmul+0x92>
 8000bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	0249      	lsleq	r1, r1, #9
 8000c16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1e:	3a7f      	subs	r2, #127	; 0x7f
 8000c20:	bfc2      	ittt	gt
 8000c22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2a:	4770      	bxgt	lr
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	dc5d      	bgt.n	8000cf4 <__aeabi_fmul+0x150>
 8000c38:	f112 0f19 	cmn.w	r2, #25
 8000c3c:	bfdc      	itt	le
 8000c3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c42:	4770      	bxle	lr
 8000c44:	f1c2 0200 	rsb	r2, r2, #0
 8000c48:	0041      	lsls	r1, r0, #1
 8000c4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4e:	f1c2 0220 	rsb	r2, r2, #32
 8000c52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5a:	f140 0000 	adc.w	r0, r0, #0
 8000c5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c62:	bf08      	it	eq
 8000c64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c68:	4770      	bx	lr
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fmul+0xce>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xe6>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fmul+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	bf18      	it	ne
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d00a      	beq.n	8000cc2 <__aeabi_fmul+0x11e>
 8000cac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb0:	bf18      	it	ne
 8000cb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb6:	d1d8      	bne.n	8000c6a <__aeabi_fmul+0xc6>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f090 0f00 	teq	r0, #0
 8000cc6:	bf17      	itett	ne
 8000cc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	f091 0f00 	teqne	r1, #0
 8000cd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd6:	d014      	beq.n	8000d02 <__aeabi_fmul+0x15e>
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_fmul+0x13e>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d10f      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000ce2:	ea93 0f0c 	teq	r3, ip
 8000ce6:	d103      	bne.n	8000cf0 <__aeabi_fmul+0x14c>
 8000ce8:	024b      	lsls	r3, r1, #9
 8000cea:	bf18      	it	ne
 8000cec:	4608      	movne	r0, r1
 8000cee:	d108      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_fdiv>:
 8000d0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d14:	bf1e      	ittt	ne
 8000d16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1a:	ea92 0f0c 	teqne	r2, ip
 8000d1e:	ea93 0f0c 	teqne	r3, ip
 8000d22:	d069      	beq.n	8000df8 <__aeabi_fdiv+0xec>
 8000d24:	eba2 0203 	sub.w	r2, r2, r3
 8000d28:	ea80 0c01 	eor.w	ip, r0, r1
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d32:	d037      	beq.n	8000da4 <__aeabi_fdiv+0x98>
 8000d34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf38      	it	cc
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d52:	428b      	cmp	r3, r1
 8000d54:	bf24      	itt	cs
 8000d56:	1a5b      	subcs	r3, r3, r1
 8000d58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6e:	bf24      	itt	cs
 8000d70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8e:	d1e0      	bne.n	8000d52 <__aeabi_fdiv+0x46>
 8000d90:	2afd      	cmp	r2, #253	; 0xfd
 8000d92:	f63f af50 	bhi.w	8000c36 <__aeabi_fmul+0x92>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dac:	327f      	adds	r2, #127	; 0x7f
 8000dae:	bfc2      	ittt	gt
 8000db0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db8:	4770      	bxgt	lr
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	e737      	b.n	8000c36 <__aeabi_fmul+0x92>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fdiv+0xc2>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xda>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e795      	b.n	8000d24 <__aeabi_fdiv+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d108      	bne.n	8000e14 <__aeabi_fdiv+0x108>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	f47f af7d 	bne.w	8000d02 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	f47f af70 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e776      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	d104      	bne.n	8000e24 <__aeabi_fdiv+0x118>
 8000e1a:	024b      	lsls	r3, r1, #9
 8000e1c:	f43f af4c 	beq.w	8000cb8 <__aeabi_fmul+0x114>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e76e      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1ca      	bne.n	8000dc6 <__aeabi_fdiv+0xba>
 8000e30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e34:	f47f af5c 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	f47f af3c 	bne.w	8000cb8 <__aeabi_fmul+0x114>
 8000e40:	e75f      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e42:	bf00      	nop

08000e44 <__gesf2>:
 8000e44:	f04f 3cff 	mov.w	ip, #4294967295
 8000e48:	e006      	b.n	8000e58 <__cmpsf2+0x4>
 8000e4a:	bf00      	nop

08000e4c <__lesf2>:
 8000e4c:	f04f 0c01 	mov.w	ip, #1
 8000e50:	e002      	b.n	8000e58 <__cmpsf2+0x4>
 8000e52:	bf00      	nop

08000e54 <__cmpsf2>:
 8000e54:	f04f 0c01 	mov.w	ip, #1
 8000e58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e68:	bf18      	it	ne
 8000e6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e6e:	d011      	beq.n	8000e94 <__cmpsf2+0x40>
 8000e70:	b001      	add	sp, #4
 8000e72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e76:	bf18      	it	ne
 8000e78:	ea90 0f01 	teqne	r0, r1
 8000e7c:	bf58      	it	pl
 8000e7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e82:	bf88      	it	hi
 8000e84:	17c8      	asrhi	r0, r1, #31
 8000e86:	bf38      	it	cc
 8000e88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e8c:	bf18      	it	ne
 8000e8e:	f040 0001 	orrne.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e98:	d102      	bne.n	8000ea0 <__cmpsf2+0x4c>
 8000e9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e9e:	d105      	bne.n	8000eac <__cmpsf2+0x58>
 8000ea0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea4:	d1e4      	bne.n	8000e70 <__cmpsf2+0x1c>
 8000ea6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eaa:	d0e1      	beq.n	8000e70 <__cmpsf2+0x1c>
 8000eac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_cfrcmple>:
 8000eb4:	4684      	mov	ip, r0
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	4661      	mov	r1, ip
 8000eba:	e7ff      	b.n	8000ebc <__aeabi_cfcmpeq>

08000ebc <__aeabi_cfcmpeq>:
 8000ebc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ebe:	f7ff ffc9 	bl	8000e54 <__cmpsf2>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	bf48      	it	mi
 8000ec6:	f110 0f00 	cmnmi.w	r0, #0
 8000eca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ecc <__aeabi_fcmpeq>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff fff4 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ed4:	bf0c      	ite	eq
 8000ed6:	2001      	moveq	r0, #1
 8000ed8:	2000      	movne	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmplt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffea 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmple>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffe0 	bl	8000ebc <__aeabi_cfcmpeq>
 8000efc:	bf94      	ite	ls
 8000efe:	2001      	movls	r0, #1
 8000f00:	2000      	movhi	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmpge>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffd2 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpgt>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffc8 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f24:	bf34      	ite	cc
 8000f26:	2001      	movcc	r0, #1
 8000f28:	2000      	movcs	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <SendCatPattern>:
 */

#include "MessageSend.h"

void SendCatPattern(UART_HandleTypeDef *huart, uint8_t CMD[])
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  if(CMD[3] == 0x61 && CMD[4] == 0x74) // cat
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	3303      	adds	r3, #3
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b61      	cmp	r3, #97	; 0x61
 8000f42:	d108      	bne.n	8000f56 <SendCatPattern+0x26>
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	3304      	adds	r3, #4
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b74      	cmp	r3, #116	; 0x74
 8000f4c:	d103      	bne.n	8000f56 <SendCatPattern+0x26>
  {
    SendINFO(huart, "           \n"
 8000f4e:	4904      	ldr	r1, [pc, #16]	; (8000f60 <SendCatPattern+0x30>)
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f000 fc7d 	bl	8001850 <SendINFO>
                    "     ^~^   \n"
                    "    ('Y') )\n"
                    "    /   \\/\n"
                    "   (\\|||/) <hello, world!>\n");
  }
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	080055a4 	.word	0x080055a4

08000f64 <SendAuthor_Lkl>:

void SendAuthor_Lkl(UART_HandleTypeDef *huart, uint8_t CMD[])
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  if(CMD[3] == 0x75 && CMD[4] == 0x74 && CMD[5] == 0x68 && CMD[6] == 0x6F && CMD[7] == 0x72) //Author : Lkl
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	3303      	adds	r3, #3
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b75      	cmp	r3, #117	; 0x75
 8000f76:	d117      	bne.n	8000fa8 <SendAuthor_Lkl+0x44>
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	3304      	adds	r3, #4
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b74      	cmp	r3, #116	; 0x74
 8000f80:	d112      	bne.n	8000fa8 <SendAuthor_Lkl+0x44>
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	3305      	adds	r3, #5
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b68      	cmp	r3, #104	; 0x68
 8000f8a:	d10d      	bne.n	8000fa8 <SendAuthor_Lkl+0x44>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	3306      	adds	r3, #6
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b6f      	cmp	r3, #111	; 0x6f
 8000f94:	d108      	bne.n	8000fa8 <SendAuthor_Lkl+0x44>
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	3307      	adds	r3, #7
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b72      	cmp	r3, #114	; 0x72
 8000f9e:	d103      	bne.n	8000fa8 <SendAuthor_Lkl+0x44>
  {
    SendINFO(huart, "       <Author>       \n"
 8000fa0:	4903      	ldr	r1, [pc, #12]	; (8000fb0 <SendAuthor_Lkl+0x4c>)
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 fc54 	bl	8001850 <SendINFO>
                    "   l       k       ll \n"
                    "   l       k   k    l \n"
                    "   l       k k      l \n"
                    "   lllll   k   k   lll\n");
  }
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	080055f0 	.word	0x080055f0

08000fb4 <PID_Init>:
#include "PID_Controller.h"

#define PID_Version  4U

void PID_Init(PID_t *PID, float Kp, float Ki, float Kd)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	603b      	str	r3, [r7, #0]
  PID->Kp = Kp;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	601a      	str	r2, [r3, #0]
  PID->Ki = Ki;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	605a      	str	r2, [r3, #4]
  PID->Kd = Kd;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	609a      	str	r2, [r3, #8]
  PID->PreviousError = PID->Integral = 0.0;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	629a      	str	r2, [r3, #40]	; 0x28
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	621a      	str	r2, [r3, #32]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr

08000fee <PID_ParameterClear>:

void PID_ParameterClear(PID_t *PID)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  PID->PWM_Value = PID->PreviousError = PID->Integral = 0.0;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	629a      	str	r2, [r3, #40]	; 0x28
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	621a      	str	r2, [r3, #32]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a1a      	ldr	r2, [r3, #32]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	619a      	str	r2, [r3, #24]
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <CalculateSpeed>:

inline void CalculateSpeed(TIM_HandleTypeDef *htim, Encoder_t *Encoder)
{
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  Encoder->Pulse = (int16_t)htim->Instance->CNT;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	b21a      	sxth	r2, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	801a      	strh	r2, [r3, #0]
  htim->Instance->CNT = 0;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
  Encoder->Direction = __HAL_TIM_IS_TIM_COUNTING_DOWN(htim);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0310 	and.w	r3, r3, #16
 8001040:	2b10      	cmp	r3, #16
 8001042:	bf0c      	ite	eq
 8001044:	2301      	moveq	r3, #1
 8001046:	2300      	movne	r3, #0
 8001048:	b2da      	uxtb	r2, r3
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	f883 2020 	strb.w	r2, [r3, #32]

  Encoder->DeltaTime = (float)Gettime(Encoder->StartTime) / 1000.0f;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	4618      	mov	r0, r3
 8001056:	f000 fc1b 	bl	8001890 <Gettime>
 800105a:	4603      	mov	r3, r0
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fd49 	bl	8000af4 <__aeabi_ui2f>
 8001062:	4603      	mov	r3, r0
 8001064:	493f      	ldr	r1, [pc, #252]	; (8001164 <CalculateSpeed+0x14c>)
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fe50 	bl	8000d0c <__aeabi_fdiv>
 800106c:	4603      	mov	r3, r0
 800106e:	461a      	mov	r2, r3
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	609a      	str	r2, [r3, #8]
  Encoder->StartTime = HAL_GetTick();
 8001074:	f001 f986 	bl	8002384 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	605a      	str	r2, [r3, #4]

  if ((Encoder->Pulse > 0 || Encoder->Pulse < 0) && Encoder->DeltaTime > 0.0f)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001084:	2b00      	cmp	r3, #0
 8001086:	dc04      	bgt.n	8001092 <CalculateSpeed+0x7a>
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108e:	2b00      	cmp	r3, #0
 8001090:	da5a      	bge.n	8001148 <CalculateSpeed+0x130>
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f04f 0100 	mov.w	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff3e 	bl	8000f1c <__aeabi_fcmpgt>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d050      	beq.n	8001148 <CalculateSpeed+0x130>
  {
    Encoder->Pulse = abs(Encoder->Pulse);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	bfb8      	it	lt
 80010b0:	425b      	neglt	r3, r3
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	801a      	strh	r2, [r3, #0]
    Encoder->CurrentRPM = ((float)Encoder->Pulse / Wheel_PPR) * (60.0f / Encoder->DeltaTime);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fd1b 	bl	8000afc <__aeabi_i2f>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4927      	ldr	r1, [pc, #156]	; (8001168 <CalculateSpeed+0x150>)
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fe1e 	bl	8000d0c <__aeabi_fdiv>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461c      	mov	r4, r3
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	4619      	mov	r1, r3
 80010da:	4824      	ldr	r0, [pc, #144]	; (800116c <CalculateSpeed+0x154>)
 80010dc:	f7ff fe16 	bl	8000d0c <__aeabi_fdiv>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4619      	mov	r1, r3
 80010e4:	4620      	mov	r0, r4
 80010e6:	f7ff fd5d 	bl	8000ba4 <__aeabi_fmul>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	60da      	str	r2, [r3, #12]
    Encoder->Speed_CM = (Encoder->CurrentRPM * Wheel_Circumference) / 60.0f;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	491e      	ldr	r1, [pc, #120]	; (8001170 <CalculateSpeed+0x158>)
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fd53 	bl	8000ba4 <__aeabi_fmul>
 80010fe:	4603      	mov	r3, r0
 8001100:	491a      	ldr	r1, [pc, #104]	; (800116c <CalculateSpeed+0x154>)
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fe02 	bl	8000d0c <__aeabi_fdiv>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	619a      	str	r2, [r3, #24]
    Encoder->DistanceTotal += ((float)Encoder->Pulse / Wheel_PPR) * Wheel_Circumference;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	69dc      	ldr	r4, [r3, #28]
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fcee 	bl	8000afc <__aeabi_i2f>
 8001120:	4603      	mov	r3, r0
 8001122:	4911      	ldr	r1, [pc, #68]	; (8001168 <CalculateSpeed+0x150>)
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fdf1 	bl	8000d0c <__aeabi_fdiv>
 800112a:	4603      	mov	r3, r0
 800112c:	4910      	ldr	r1, [pc, #64]	; (8001170 <CalculateSpeed+0x158>)
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fd38 	bl	8000ba4 <__aeabi_fmul>
 8001134:	4603      	mov	r3, r0
 8001136:	4619      	mov	r1, r3
 8001138:	4620      	mov	r0, r4
 800113a:	f7ff fc2b 	bl	8000994 <__addsf3>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	61da      	str	r2, [r3, #28]
 8001146:	e008      	b.n	800115a <CalculateSpeed+0x142>
  }else{
    Encoder->CurrentRPM = 0;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
    Encoder->Speed_CM = 0;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bd90      	pop	{r4, r7, pc}
 8001162:	bf00      	nop
 8001164:	447a0000 	.word	0x447a0000
 8001168:	43820000 	.word	0x43820000
 800116c:	42700000 	.word	0x42700000
 8001170:	41a863ae 	.word	0x41a863ae

08001174 <QueuePush>:
  DataQueue.Head = DataQueue.Tail = 0;
  DataState = DataLength = 0;
}

void QueuePush(QueueData Data)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  QueueSize Position = (DataQueue.Head + 1) % MAX_SIZE;
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <QueuePush+0x48>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	425a      	negs	r2, r3
 8001186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800118a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800118e:	bf58      	it	pl
 8001190:	4253      	negpl	r3, r2
 8001192:	81fb      	strh	r3, [r7, #14]
  if(Position != DataQueue.Tail)
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <QueuePush+0x48>)
 8001196:	885b      	ldrh	r3, [r3, #2]
 8001198:	89fa      	ldrh	r2, [r7, #14]
 800119a:	429a      	cmp	r2, r3
 800119c:	d009      	beq.n	80011b2 <QueuePush+0x3e>
  {
    DataQueue.Data[DataQueue.Head] = Data;
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <QueuePush+0x48>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <QueuePush+0x48>)
 80011a6:	4413      	add	r3, r2
 80011a8:	79fa      	ldrb	r2, [r7, #7]
 80011aa:	711a      	strb	r2, [r3, #4]
    DataQueue.Head = Position;
 80011ac:	4a03      	ldr	r2, [pc, #12]	; (80011bc <QueuePush+0x48>)
 80011ae:	89fb      	ldrh	r3, [r7, #14]
 80011b0:	8013      	strh	r3, [r2, #0]
  }
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	200000ec 	.word	0x200000ec

080011c0 <QueuePOP>:

static void QueuePOP(QueueData *Data)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if(DataQueue.Tail != DataQueue.Head)
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <QueuePOP+0x48>)
 80011ca:	885a      	ldrh	r2, [r3, #2]
 80011cc:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <QueuePOP+0x48>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d014      	beq.n	80011fe <QueuePOP+0x3e>
  {
    *Data = DataQueue.Data[DataQueue.Tail];
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <QueuePOP+0x48>)
 80011d6:	885b      	ldrh	r3, [r3, #2]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <QueuePOP+0x48>)
 80011dc:	4413      	add	r3, r2
 80011de:	791a      	ldrb	r2, [r3, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	701a      	strb	r2, [r3, #0]
    DataQueue.Tail = (DataQueue.Tail + 1) % MAX_SIZE;
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <QueuePOP+0x48>)
 80011e6:	885b      	ldrh	r3, [r3, #2]
 80011e8:	3301      	adds	r3, #1
 80011ea:	425a      	negs	r2, r3
 80011ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011f4:	bf58      	it	pl
 80011f6:	4253      	negpl	r3, r2
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	4b03      	ldr	r3, [pc, #12]	; (8001208 <QueuePOP+0x48>)
 80011fc:	805a      	strh	r2, [r3, #2]
  }
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	200000ec 	.word	0x200000ec

0800120c <QueueDataSize>:

static QueueSize QueueDataSize(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return ((DataQueue.Head + MAX_SIZE - DataQueue.Tail) % MAX_SIZE);
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <QueueDataSize+0x2c>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001218:	4a07      	ldr	r2, [pc, #28]	; (8001238 <QueueDataSize+0x2c>)
 800121a:	8852      	ldrh	r2, [r2, #2]
 800121c:	1a9b      	subs	r3, r3, r2
 800121e:	425a      	negs	r2, r3
 8001220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001228:	bf58      	it	pl
 800122a:	4253      	negpl	r3, r2
 800122c:	b29b      	uxth	r3, r3
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	200000ec 	.word	0x200000ec

0800123c <QueueFindControlMessage>:
#endif

}

QueueSize QueueFindControlMessage(ControlMessage *ControlMsg, uint8_t BufferSize)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	70fb      	strb	r3, [r7, #3]
  QueueSize DataSize = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	81fb      	strh	r3, [r7, #14]
  QueueData Data     = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	737b      	strb	r3, [r7, #13]

//  uint32_t ESP32_HeadData = 0;

  while(QueueDataSize() > 0)
 8001250:	e035      	b.n	80012be <QueueFindControlMessage+0x82>
  {
    QueuePOP(&Data);
 8001252:	f107 030d 	add.w	r3, r7, #13
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ffb2 	bl	80011c0 <QueuePOP>

    if(DataLength == 0 && Data != CMD_HEAD)
 800125c:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <QueueFindControlMessage+0x98>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d103      	bne.n	800126c <QueueFindControlMessage+0x30>
 8001264:	7b7b      	ldrb	r3, [r7, #13]
 8001266:	2bf1      	cmp	r3, #241	; 0xf1
 8001268:	d000      	beq.n	800126c <QueueFindControlMessage+0x30>
    {
//      ESP32_DataProcess(ControlMsg, &ESP32_HeadData, Data);
      continue;
 800126a:	e028      	b.n	80012be <QueueFindControlMessage+0x82>
    }

    if(DataLength < BufferSize)
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	b29a      	uxth	r2, r3
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <QueueFindControlMessage+0x98>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	d90b      	bls.n	8001290 <QueueFindControlMessage+0x54>
      ControlMsg->TmpData[DataLength++] = Data;
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <QueueFindControlMessage+0x98>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	1c5a      	adds	r2, r3, #1
 800127e:	b291      	uxth	r1, r2
 8001280:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <QueueFindControlMessage+0x98>)
 8001282:	8011      	strh	r1, [r2, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	7b7a      	ldrb	r2, [r7, #13]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	440b      	add	r3, r1
 800128c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    DataState = ((DataState << 8) | Data);
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <QueueFindControlMessage+0x9c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	7b7a      	ldrb	r2, [r7, #13]
 8001298:	4313      	orrs	r3, r2
 800129a:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <QueueFindControlMessage+0x9c>)
 800129c:	6013      	str	r3, [r2, #0]

    if(DataState == CMD_TAIL)
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <QueueFindControlMessage+0x9c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <QueueFindControlMessage+0xa0>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d10a      	bne.n	80012be <QueueFindControlMessage+0x82>
    {
      DataSize   = DataLength;
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <QueueFindControlMessage+0x98>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	81fb      	strh	r3, [r7, #14]
      DataState  = 0;
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <QueueFindControlMessage+0x9c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
      DataLength = 0;
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <QueueFindControlMessage+0x98>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	801a      	strh	r2, [r3, #0]

      return DataSize;
 80012ba:	89fb      	ldrh	r3, [r7, #14]
 80012bc:	e005      	b.n	80012ca <QueueFindControlMessage+0x8e>
  while(QueueDataSize() > 0)
 80012be:	f7ff ffa5 	bl	800120c <QueueDataSize>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1c4      	bne.n	8001252 <QueueFindControlMessage+0x16>
    }
  }
  return 0;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200002f4 	.word	0x200002f4
 80012d8:	200002f0 	.word	0x200002f0
 80012dc:	f2f10d0a 	.word	0xf2f10d0a

080012e0 <SendChar>:

void SendChar(UART_HandleTypeDef *huart, uint8_t t)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(huart, &t , sizeof(t) ,10);
 80012ec:	1cf9      	adds	r1, r7, #3
 80012ee:	230a      	movs	r3, #10
 80012f0:	2201      	movs	r2, #1
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f002 feb8 	bl	8004068 <HAL_UART_Transmit>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <SendStrings>:

void SendStrings(UART_HandleTypeDef *huart, uint8_t *str)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  while(*str)
 800130a:	e008      	b.n	800131e <SendStrings+0x1e>
  {
    SendChar(huart, (*str)&0xFF);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ffe4 	bl	80012e0 <SendChar>
    str++;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	3301      	adds	r3, #1
 800131c:	603b      	str	r3, [r7, #0]
  while(*str)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f2      	bne.n	800130c <SendStrings+0xc>
  }
}
 8001326:	bf00      	nop
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <AT_CIPSEND>:

void AT_CIPSEND(UART_HandleTypeDef *huart, uint8_t Aisle, int SendSize)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	460b      	mov	r3, r1
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	72fb      	strb	r3, [r7, #11]
  char buffer[20] = {0};
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	f107 0318 	add.w	r3, r7, #24
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
  sprintf(buffer, "AT+CIPSEND=%c,%d\r\n", Aisle, SendSize);
 8001350:	7afa      	ldrb	r2, [r7, #11]
 8001352:	f107 0014 	add.w	r0, r7, #20
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4906      	ldr	r1, [pc, #24]	; (8001374 <AT_CIPSEND+0x44>)
 800135a:	f003 fc7d 	bl	8004c58 <siprintf>
  SendStrings(huart, (uint8_t *)buffer);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	f7ff ffcb 	bl	8001300 <SendStrings>
}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	; 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	08005664 	.word	0x08005664

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137c:	f000 ffaa 	bl	80022d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001380:	f000 f858 	bl	8001434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001384:	f000 fa16 	bl	80017b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001388:	f000 f8c8 	bl	800151c <MX_TIM2_Init>
  MX_I2C2_Init();
 800138c:	f000 f898 	bl	80014c0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001390:	f000 f9e6 	bl	8001760 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001394:	f000 f93c 	bl	8001610 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001398:	f000 f98e 	bl	80016b8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  /*-------------------------------- UART Init ----------------------------------*/
  WIFI_Init();
 800139c:	f000 fa8e 	bl	80018bc <WIFI_Init>
  ControlMsg.ESP32Info.Aisle = '0';
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <main+0x98>)
 80013a2:	2230      	movs	r2, #48	; 0x30
 80013a4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  /*-------------------------- MOTOR controller Init ----------------------------*/
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_ALL);
 80013a8:	213c      	movs	r1, #60	; 0x3c
 80013aa:	481a      	ldr	r0, [pc, #104]	; (8001414 <main+0x9c>)
 80013ac:	f002 f900 	bl	80035b0 <HAL_TIM_PWM_Start>
  TIM2->CR1 |= TIM_CR1_CEN;
 80013b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6013      	str	r3, [r2, #0]
  TIM2->CNT = 0;
 80013c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013c4:	2200      	movs	r2, #0
 80013c6:	625a      	str	r2, [r3, #36]	; 0x24
  TIM2->CCER |= (TIM_CCER_CC1E|TIM_CCER_CC2E|TIM_CCER_CC3E|TIM_CCER_CC4E);
 80013c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d2:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80013d6:	f043 0311 	orr.w	r3, r3, #17
 80013da:	6213      	str	r3, [r2, #32]

  /*--------------------------- MOTOR1 Encoder Init -----------------------------*/
  PID_Init(&MOTOR_PID[MOTOR1], 0.85, 0.90, 0.02);
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <main+0xa0>)
 80013de:	4a0f      	ldr	r2, [pc, #60]	; (800141c <main+0xa4>)
 80013e0:	490f      	ldr	r1, [pc, #60]	; (8001420 <main+0xa8>)
 80013e2:	4810      	ldr	r0, [pc, #64]	; (8001424 <main+0xac>)
 80013e4:	f7ff fde6 	bl	8000fb4 <PID_Init>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80013e8:	213c      	movs	r1, #60	; 0x3c
 80013ea:	480f      	ldr	r0, [pc, #60]	; (8001428 <main+0xb0>)
 80013ec:	f002 fa24 	bl	8003838 <HAL_TIM_Encoder_Start>

  /*--------------------------- MOTOR2 Encoder Init -----------------------------*/
  PID_Init(&MOTOR_PID[MOTOR2], 0.85, 0.90, 0.02);
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <main+0xa0>)
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <main+0xa4>)
 80013f4:	490a      	ldr	r1, [pc, #40]	; (8001420 <main+0xa8>)
 80013f6:	480d      	ldr	r0, [pc, #52]	; (800142c <main+0xb4>)
 80013f8:	f7ff fddc 	bl	8000fb4 <PID_Init>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80013fc:	213c      	movs	r1, #60	; 0x3c
 80013fe:	480c      	ldr	r0, [pc, #48]	; (8001430 <main+0xb8>)
 8001400:	f002 fa1a 	bl	8003838 <HAL_TIM_Encoder_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /*------------- read WIFI data -------------*/
    MessageProcess();
 8001404:	f000 fc66 	bl	8001cd4 <MessageProcess>
    /*-------------- MOTOR Control -------------*/
    MOTOR_Control();
 8001408:	f000 fcd4 	bl	8001db4 <MOTOR_Control>
    MessageProcess();
 800140c:	e7fa      	b.n	8001404 <main+0x8c>
 800140e:	bf00      	nop
 8001410:	2000046c 	.word	0x2000046c
 8001414:	2000034c 	.word	0x2000034c
 8001418:	3ca3d70a 	.word	0x3ca3d70a
 800141c:	3f666666 	.word	0x3f666666
 8001420:	3f59999a 	.word	0x3f59999a
 8001424:	200005ac 	.word	0x200005ac
 8001428:	20000394 	.word	0x20000394
 800142c:	200005e8 	.word	0x200005e8
 8001430:	200003dc 	.word	0x200003dc

08001434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b090      	sub	sp, #64	; 0x40
 8001438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143a:	f107 0318 	add.w	r3, r7, #24
 800143e:	2228      	movs	r2, #40	; 0x28
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f003 fc00 	bl	8004c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001456:	2301      	movs	r3, #1
 8001458:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800145a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800145e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001464:	2301      	movs	r3, #1
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001468:	2302      	movs	r3, #2
 800146a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800146c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001470:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001472:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001476:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001478:	f107 0318 	add.w	r3, r7, #24
 800147c:	4618      	mov	r0, r3
 800147e:	f001 fc37 	bl	8002cf0 <HAL_RCC_OscConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001488:	f000 fcf2 	bl	8001e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148c:	230f      	movs	r3, #15
 800148e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001490:	2302      	movs	r3, #2
 8001492:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800149c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	2101      	movs	r1, #1
 80014a6:	4618      	mov	r0, r3
 80014a8:	f001 fea4 	bl	80031f4 <HAL_RCC_ClockConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014b2:	f000 fcdd 	bl	8001e70 <Error_Handler>
  }
}
 80014b6:	bf00      	nop
 80014b8:	3740      	adds	r7, #64	; 0x40
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MX_I2C2_Init+0x50>)
 80014c6:	4a13      	ldr	r2, [pc, #76]	; (8001514 <MX_I2C2_Init+0x54>)
 80014c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_I2C2_Init+0x50>)
 80014cc:	4a12      	ldr	r2, [pc, #72]	; (8001518 <MX_I2C2_Init+0x58>)
 80014ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_I2C2_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_I2C2_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_I2C2_Init+0x50>)
 80014de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <MX_I2C2_Init+0x50>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_I2C2_Init+0x50>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <MX_I2C2_Init+0x50>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_I2C2_Init+0x50>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <MX_I2C2_Init+0x50>)
 80014fe:	f001 fab3 	bl	8002a68 <HAL_I2C_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001508:	f000 fcb2 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200002f8 	.word	0x200002f8
 8001514:	40005800 	.word	0x40005800
 8001518:	000186a0 	.word	0x000186a0

0800151c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001522:	f107 0320 	add.w	r3, r7, #32
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]
 800153a:	615a      	str	r2, [r3, #20]
 800153c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800153e:	4b33      	ldr	r3, [pc, #204]	; (800160c <MX_TIM2_Init+0xf0>)
 8001540:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001544:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001546:	4b31      	ldr	r3, [pc, #196]	; (800160c <MX_TIM2_Init+0xf0>)
 8001548:	2200      	movs	r2, #0
 800154a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154c:	4b2f      	ldr	r3, [pc, #188]	; (800160c <MX_TIM2_Init+0xf0>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48000;
 8001552:	4b2e      	ldr	r3, [pc, #184]	; (800160c <MX_TIM2_Init+0xf0>)
 8001554:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001558:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155a:	4b2c      	ldr	r3, [pc, #176]	; (800160c <MX_TIM2_Init+0xf0>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001560:	4b2a      	ldr	r3, [pc, #168]	; (800160c <MX_TIM2_Init+0xf0>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001566:	4829      	ldr	r0, [pc, #164]	; (800160c <MX_TIM2_Init+0xf0>)
 8001568:	f001 ffd2 	bl	8003510 <HAL_TIM_PWM_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001572:	f000 fc7d 	bl	8001e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800157e:	f107 0320 	add.w	r3, r7, #32
 8001582:	4619      	mov	r1, r3
 8001584:	4821      	ldr	r0, [pc, #132]	; (800160c <MX_TIM2_Init+0xf0>)
 8001586:	f002 fcc1 	bl	8003f0c <HAL_TIMEx_MasterConfigSynchronization>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001590:	f000 fc6e 	bl	8001e70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001594:	2360      	movs	r3, #96	; 0x60
 8001596:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2200      	movs	r2, #0
 80015a8:	4619      	mov	r1, r3
 80015aa:	4818      	ldr	r0, [pc, #96]	; (800160c <MX_TIM2_Init+0xf0>)
 80015ac:	f002 f9d2 	bl	8003954 <HAL_TIM_PWM_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80015b6:	f000 fc5b 	bl	8001e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2204      	movs	r2, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	4812      	ldr	r0, [pc, #72]	; (800160c <MX_TIM2_Init+0xf0>)
 80015c2:	f002 f9c7 	bl	8003954 <HAL_TIM_PWM_ConfigChannel>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80015cc:	f000 fc50 	bl	8001e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	2208      	movs	r2, #8
 80015d4:	4619      	mov	r1, r3
 80015d6:	480d      	ldr	r0, [pc, #52]	; (800160c <MX_TIM2_Init+0xf0>)
 80015d8:	f002 f9bc 	bl	8003954 <HAL_TIM_PWM_ConfigChannel>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80015e2:	f000 fc45 	bl	8001e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	220c      	movs	r2, #12
 80015ea:	4619      	mov	r1, r3
 80015ec:	4807      	ldr	r0, [pc, #28]	; (800160c <MX_TIM2_Init+0xf0>)
 80015ee:	f002 f9b1 	bl	8003954 <HAL_TIM_PWM_ConfigChannel>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80015f8:	f000 fc3a 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015fc:	4803      	ldr	r0, [pc, #12]	; (800160c <MX_TIM2_Init+0xf0>)
 80015fe:	f000 fd37 	bl	8002070 <HAL_TIM_MspPostInit>

}
 8001602:	bf00      	nop
 8001604:	3728      	adds	r7, #40	; 0x28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	2000034c 	.word	0x2000034c

08001610 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08c      	sub	sp, #48	; 0x30
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	2224      	movs	r2, #36	; 0x24
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f003 fb12 	bl	8004c48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800162c:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <MX_TIM3_Init+0xa0>)
 800162e:	4a21      	ldr	r2, [pc, #132]	; (80016b4 <MX_TIM3_Init+0xa4>)
 8001630:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001632:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <MX_TIM3_Init+0xa0>)
 8001634:	2200      	movs	r2, #0
 8001636:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001638:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <MX_TIM3_Init+0xa0>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <MX_TIM3_Init+0xa0>)
 8001640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001644:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <MX_TIM3_Init+0xa0>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164c:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <MX_TIM3_Init+0xa0>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001652:	2301      	movs	r3, #1
 8001654:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800165a:	2301      	movs	r3, #1
 800165c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800166a:	2301      	movs	r3, #1
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800166e:	2300      	movs	r3, #0
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001676:	f107 030c 	add.w	r3, r7, #12
 800167a:	4619      	mov	r1, r3
 800167c:	480c      	ldr	r0, [pc, #48]	; (80016b0 <MX_TIM3_Init+0xa0>)
 800167e:	f002 f839 	bl	80036f4 <HAL_TIM_Encoder_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001688:	f000 fbf2 	bl	8001e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	4619      	mov	r1, r3
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_TIM3_Init+0xa0>)
 800169a:	f002 fc37 	bl	8003f0c <HAL_TIMEx_MasterConfigSynchronization>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80016a4:	f000 fbe4 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	3730      	adds	r7, #48	; 0x30
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000394 	.word	0x20000394
 80016b4:	40000400 	.word	0x40000400

080016b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08c      	sub	sp, #48	; 0x30
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	2224      	movs	r2, #36	; 0x24
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f003 fabe 	bl	8004c48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016d4:	4b20      	ldr	r3, [pc, #128]	; (8001758 <MX_TIM4_Init+0xa0>)
 80016d6:	4a21      	ldr	r2, [pc, #132]	; (800175c <MX_TIM4_Init+0xa4>)
 80016d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016da:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <MX_TIM4_Init+0xa0>)
 80016dc:	2200      	movs	r2, #0
 80016de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <MX_TIM4_Init+0xa0>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80016e6:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <MX_TIM4_Init+0xa0>)
 80016e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <MX_TIM4_Init+0xa0>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f4:	4b18      	ldr	r3, [pc, #96]	; (8001758 <MX_TIM4_Init+0xa0>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80016fa:	2301      	movs	r3, #1
 80016fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001702:	2301      	movs	r3, #1
 8001704:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800170e:	2300      	movs	r3, #0
 8001710:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001712:	2301      	movs	r3, #1
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001716:	2300      	movs	r3, #0
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800171e:	f107 030c 	add.w	r3, r7, #12
 8001722:	4619      	mov	r1, r3
 8001724:	480c      	ldr	r0, [pc, #48]	; (8001758 <MX_TIM4_Init+0xa0>)
 8001726:	f001 ffe5 	bl	80036f4 <HAL_TIM_Encoder_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001730:	f000 fb9e 	bl	8001e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001734:	2300      	movs	r3, #0
 8001736:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	4619      	mov	r1, r3
 8001740:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_TIM4_Init+0xa0>)
 8001742:	f002 fbe3 	bl	8003f0c <HAL_TIMEx_MasterConfigSynchronization>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800174c:	f000 fb90 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	3730      	adds	r7, #48	; 0x30
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	200003dc 	.word	0x200003dc
 800175c:	40000800 	.word	0x40000800

08001760 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USART1_UART_Init+0x4c>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <MX_USART1_UART_Init+0x50>)
 8001768:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_USART1_UART_Init+0x4c>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART1_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USART1_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART1_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USART1_UART_Init+0x4c>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART1_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USART1_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USART1_UART_Init+0x4c>)
 8001798:	f002 fc16 	bl	8003fc8 <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017a2:	f000 fb65 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000424 	.word	0x20000424
 80017b0:	40013800 	.word	0x40013800

080017b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ba:	4b14      	ldr	r3, [pc, #80]	; (800180c <MX_GPIO_Init+0x58>)
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	4a13      	ldr	r2, [pc, #76]	; (800180c <MX_GPIO_Init+0x58>)
 80017c0:	f043 0320 	orr.w	r3, r3, #32
 80017c4:	6193      	str	r3, [r2, #24]
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_GPIO_Init+0x58>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f003 0320 	and.w	r3, r3, #32
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_GPIO_Init+0x58>)
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	4a0d      	ldr	r2, [pc, #52]	; (800180c <MX_GPIO_Init+0x58>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	6193      	str	r3, [r2, #24]
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <MX_GPIO_Init+0x58>)
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <MX_GPIO_Init+0x58>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	4a07      	ldr	r2, [pc, #28]	; (800180c <MX_GPIO_Init+0x58>)
 80017f0:	f043 0308 	orr.w	r3, r3, #8
 80017f4:	6193      	str	r3, [r2, #24]
 80017f6:	4b05      	ldr	r3, [pc, #20]	; (800180c <MX_GPIO_Init+0x58>)
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	40021000 	.word	0x40021000

08001810 <AT_SEND>:

/* USER CODE BEGIN 4 */
void AT_SEND(UART_HandleTypeDef *huart, uint8_t Aisle, int SendSize)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	460b      	mov	r3, r1
 800181a:	607a      	str	r2, [r7, #4]
 800181c:	72fb      	strb	r3, [r7, #11]
  AT_CIPSEND(huart, ControlMsg.ESP32Info.Aisle, SendSize);
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <AT_SEND+0x3c>)
 8001820:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	4619      	mov	r1, r3
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f7ff fd81 	bl	8001330 <AT_CIPSEND>
  HAL_Delay(20);
 800182e:	2014      	movs	r0, #20
 8001830:	f000 fdb2 	bl	8002398 <HAL_Delay>
  HAL_UART_Transmit(huart, (uint8_t *)ControlMsg.TXBuffer, SendSize, 10);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	b29a      	uxth	r2, r3
 8001838:	230a      	movs	r3, #10
 800183a:	4904      	ldr	r1, [pc, #16]	; (800184c <AT_SEND+0x3c>)
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f002 fc13 	bl	8004068 <HAL_UART_Transmit>
}
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000046c 	.word	0x2000046c

08001850 <SendINFO>:

void SendINFO(UART_HandleTypeDef *huart, const char *format, ...)
{
 8001850:	b40e      	push	{r1, r2, r3}
 8001852:	b580      	push	{r7, lr}
 8001854:	b085      	sub	sp, #20
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  va_list args;
  int SendSize;

  va_start(args, format);
 800185a:	f107 0320 	add.w	r3, r7, #32
 800185e:	60bb      	str	r3, [r7, #8]
  SendSize = vsprintf(ControlMsg.TXBuffer, format, args);
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	69f9      	ldr	r1, [r7, #28]
 8001864:	4809      	ldr	r0, [pc, #36]	; (800188c <SendINFO+0x3c>)
 8001866:	f003 fa2d 	bl	8004cc4 <vsiprintf>
 800186a:	60f8      	str	r0, [r7, #12]
  va_end(args);

  AT_SEND(huart, ControlMsg.ESP32Info.Aisle, SendSize);
 800186c:	4b07      	ldr	r3, [pc, #28]	; (800188c <SendINFO+0x3c>)
 800186e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	4619      	mov	r1, r3
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffca 	bl	8001810 <AT_SEND>
}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001886:	b003      	add	sp, #12
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	2000046c 	.word	0x2000046c

08001890 <Gettime>:

uint32_t Gettime(uint32_t StartTime)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t CurrentTime = HAL_GetTick();
 8001898:	f000 fd74 	bl	8002384 <HAL_GetTick>
 800189c:	60f8      	str	r0, [r7, #12]

  if(CurrentTime >= StartTime) return (CurrentTime - StartTime);
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d303      	bcc.n	80018ae <Gettime+0x1e>
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	e002      	b.n	80018b4 <Gettime+0x24>
  else                         return (0xFFFFFFFF - StartTime + CurrentTime + 1);
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	1ad3      	subs	r3, r2, r3
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <WIFI_Init>:

static void WIFI_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  USART1->CR1 |= USART_CR1_RXNEIE;
 80018c0:	4b1e      	ldr	r3, [pc, #120]	; (800193c <WIFI_Init+0x80>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4a1d      	ldr	r2, [pc, #116]	; (800193c <WIFI_Init+0x80>)
 80018c6:	f043 0320 	orr.w	r3, r3, #32
 80018ca:	60d3      	str	r3, [r2, #12]

  HAL_Delay(5000);
 80018cc:	f241 3088 	movw	r0, #5000	; 0x1388
 80018d0:	f000 fd62 	bl	8002398 <HAL_Delay>
  HAL_UART_Transmit(&huart1, (uint8_t *)AT,        sizeof(AT)        -1, 10); HAL_Delay(800);
 80018d4:	230a      	movs	r3, #10
 80018d6:	2204      	movs	r2, #4
 80018d8:	4919      	ldr	r1, [pc, #100]	; (8001940 <WIFI_Init+0x84>)
 80018da:	481a      	ldr	r0, [pc, #104]	; (8001944 <WIFI_Init+0x88>)
 80018dc:	f002 fbc4 	bl	8004068 <HAL_UART_Transmit>
 80018e0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80018e4:	f000 fd58 	bl	8002398 <HAL_Delay>
  HAL_UART_Transmit(&huart1, (uint8_t *)ATE,       sizeof(ATE)       -1, 10); HAL_Delay(800);
 80018e8:	230a      	movs	r3, #10
 80018ea:	2206      	movs	r2, #6
 80018ec:	4916      	ldr	r1, [pc, #88]	; (8001948 <WIFI_Init+0x8c>)
 80018ee:	4815      	ldr	r0, [pc, #84]	; (8001944 <WIFI_Init+0x88>)
 80018f0:	f002 fbba 	bl	8004068 <HAL_UART_Transmit>
 80018f4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80018f8:	f000 fd4e 	bl	8002398 <HAL_Delay>
  HAL_UART_Transmit(&huart1, (uint8_t *)CWMODE,    sizeof(CWMODE)    -1, 10); HAL_Delay(800);
 80018fc:	230a      	movs	r3, #10
 80018fe:	220d      	movs	r2, #13
 8001900:	4912      	ldr	r1, [pc, #72]	; (800194c <WIFI_Init+0x90>)
 8001902:	4810      	ldr	r0, [pc, #64]	; (8001944 <WIFI_Init+0x88>)
 8001904:	f002 fbb0 	bl	8004068 <HAL_UART_Transmit>
 8001908:	f44f 7048 	mov.w	r0, #800	; 0x320
 800190c:	f000 fd44 	bl	8002398 <HAL_Delay>
  HAL_UART_Transmit(&huart1, (uint8_t *)CIPMUX,    sizeof(CIPMUX)    -1, 10); HAL_Delay(800);
 8001910:	230a      	movs	r3, #10
 8001912:	220d      	movs	r2, #13
 8001914:	490e      	ldr	r1, [pc, #56]	; (8001950 <WIFI_Init+0x94>)
 8001916:	480b      	ldr	r0, [pc, #44]	; (8001944 <WIFI_Init+0x88>)
 8001918:	f002 fba6 	bl	8004068 <HAL_UART_Transmit>
 800191c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001920:	f000 fd3a 	bl	8002398 <HAL_Delay>
  HAL_UART_Transmit(&huart1, (uint8_t *)CIPSERVER, sizeof(CIPSERVER) -1, 10); HAL_Delay(800);
 8001924:	230a      	movs	r3, #10
 8001926:	2215      	movs	r2, #21
 8001928:	490a      	ldr	r1, [pc, #40]	; (8001954 <WIFI_Init+0x98>)
 800192a:	4806      	ldr	r0, [pc, #24]	; (8001944 <WIFI_Init+0x88>)
 800192c:	f002 fb9c 	bl	8004068 <HAL_UART_Transmit>
 8001930:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001934:	f000 fd30 	bl	8002398 <HAL_Delay>
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40013800 	.word	0x40013800
 8001940:	08005678 	.word	0x08005678
 8001944:	20000424 	.word	0x20000424
 8001948:	08005680 	.word	0x08005680
 800194c:	08005688 	.word	0x08005688
 8001950:	08005698 	.word	0x08005698
 8001954:	080056a8 	.word	0x080056a8

08001958 <CalculateSpeedAngle>:
                         PID_t          PID[2],
                         ControlINFO_t *ControlINFO,
                         uint8_t        ControlParameters[],
                         const float    MAXRPM,
                         const double   Coefficient[2][6])
{
 8001958:	b5b0      	push	{r4, r5, r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	603b      	str	r3, [r7, #0]
#define use 1

  if(ControlParameters[3] == 0x11 && ControlParameters[8] == 0x12)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	3303      	adds	r3, #3
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b11      	cmp	r3, #17
 800196e:	f040 81aa 	bne.w	8001cc6 <CalculateSpeedAngle+0x36e>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	3308      	adds	r3, #8
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b12      	cmp	r3, #18
 800197a:	f040 81a4 	bne.w	8001cc6 <CalculateSpeedAngle+0x36e>
  {
    uint8_t SpeedData[4] = { ControlParameters[7], ControlParameters[6], ControlParameters[5], ControlParameters[4] };
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	79db      	ldrb	r3, [r3, #7]
 8001982:	753b      	strb	r3, [r7, #20]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	799b      	ldrb	r3, [r3, #6]
 8001988:	757b      	strb	r3, [r7, #21]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	795b      	ldrb	r3, [r3, #5]
 800198e:	75bb      	strb	r3, [r7, #22]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	791b      	ldrb	r3, [r3, #4]
 8001994:	75fb      	strb	r3, [r7, #23]
    memcpy(&ControlINFO->MotorSpeed, (void *)&SpeedData, 4);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	601a      	str	r2, [r3, #0]
    uint8_t AngleData[4] = { ControlParameters[12], ControlParameters[11], ControlParameters[10], ControlParameters[9] };
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	7b1b      	ldrb	r3, [r3, #12]
 80019a0:	743b      	strb	r3, [r7, #16]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	7adb      	ldrb	r3, [r3, #11]
 80019a6:	747b      	strb	r3, [r7, #17]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	7a9b      	ldrb	r3, [r3, #10]
 80019ac:	74bb      	strb	r3, [r7, #18]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	7a5b      	ldrb	r3, [r3, #9]
 80019b2:	74fb      	strb	r3, [r7, #19]
    memcpy(&ControlINFO->SteeringAngle, (void *)&AngleData, 4);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3304      	adds	r3, #4
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	601a      	str	r2, [r3, #0]

    ControlINFO->Action = Forward;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	721a      	strb	r2, [r3, #8]
    if(ControlINFO->SteeringAngle >  90.0 && ControlINFO->SteeringAngle <=  180.0)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	498d      	ldr	r1, [pc, #564]	; (8001bfc <CalculateSpeedAngle+0x2a4>)
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff faa7 	bl	8000f1c <__aeabi_fcmpgt>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d016      	beq.n	8001a02 <CalculateSpeedAngle+0xaa>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	4989      	ldr	r1, [pc, #548]	; (8001c00 <CalculateSpeedAngle+0x2a8>)
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fa8a 	bl	8000ef4 <__aeabi_fcmple>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00d      	beq.n	8001a02 <CalculateSpeedAngle+0xaa>
    {
      ControlINFO->SteeringAngle =  180.0 - ControlINFO->SteeringAngle;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4619      	mov	r1, r3
 80019ec:	4884      	ldr	r0, [pc, #528]	; (8001c00 <CalculateSpeedAngle+0x2a8>)
 80019ee:	f7fe ffcf 	bl	8000990 <__aeabi_fsub>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	605a      	str	r2, [r3, #4]
      ControlINFO->Action = Backward;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2202      	movs	r2, #2
 80019fe:	721a      	strb	r2, [r3, #8]
 8001a00:	e01e      	b.n	8001a40 <CalculateSpeedAngle+0xe8>
    }
    else if(ControlINFO->SteeringAngle < -90.0 && ControlINFO->SteeringAngle >= -180.0)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	497f      	ldr	r1, [pc, #508]	; (8001c04 <CalculateSpeedAngle+0x2ac>)
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fa69 	bl	8000ee0 <__aeabi_fcmplt>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d015      	beq.n	8001a40 <CalculateSpeedAngle+0xe8>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	497b      	ldr	r1, [pc, #492]	; (8001c08 <CalculateSpeedAngle+0x2b0>)
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fa74 	bl	8000f08 <__aeabi_fcmpge>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00c      	beq.n	8001a40 <CalculateSpeedAngle+0xe8>
    {
      ControlINFO->SteeringAngle = -180.0 - ControlINFO->SteeringAngle;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4876      	ldr	r0, [pc, #472]	; (8001c08 <CalculateSpeedAngle+0x2b0>)
 8001a2e:	f7fe ffaf 	bl	8000990 <__aeabi_fsub>
 8001a32:	4603      	mov	r3, r0
 8001a34:	461a      	mov	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	605a      	str	r2, [r3, #4]
      ControlINFO->Action = Backward;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	721a      	strb	r2, [r3, #8]
    }

    if(  (ControlINFO->SteeringAngle >= -20.0 && ControlINFO->SteeringAngle <=  20.0)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	4971      	ldr	r1, [pc, #452]	; (8001c0c <CalculateSpeedAngle+0x2b4>)
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fa5e 	bl	8000f08 <__aeabi_fcmpge>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d008      	beq.n	8001a64 <CalculateSpeedAngle+0x10c>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	496e      	ldr	r1, [pc, #440]	; (8001c10 <CalculateSpeedAngle+0x2b8>)
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fa4b 	bl	8000ef4 <__aeabi_fcmple>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d123      	bne.n	8001aac <CalculateSpeedAngle+0x154>
       ||(ControlINFO->SteeringAngle >=  70.0 && ControlINFO->SteeringAngle <=  90.0)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	496a      	ldr	r1, [pc, #424]	; (8001c14 <CalculateSpeedAngle+0x2bc>)
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fa4c 	bl	8000f08 <__aeabi_fcmpge>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d008      	beq.n	8001a88 <CalculateSpeedAngle+0x130>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4960      	ldr	r1, [pc, #384]	; (8001bfc <CalculateSpeedAngle+0x2a4>)
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fa39 	bl	8000ef4 <__aeabi_fcmple>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d111      	bne.n	8001aac <CalculateSpeedAngle+0x154>
       ||(ControlINFO->SteeringAngle <= -70.0 && ControlINFO->SteeringAngle >= -90.0))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	4962      	ldr	r1, [pc, #392]	; (8001c18 <CalculateSpeedAngle+0x2c0>)
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fa30 	bl	8000ef4 <__aeabi_fcmple>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d010      	beq.n	8001abc <CalculateSpeedAngle+0x164>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	4959      	ldr	r1, [pc, #356]	; (8001c04 <CalculateSpeedAngle+0x2ac>)
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fa31 	bl	8000f08 <__aeabi_fcmpge>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d007      	beq.n	8001abc <CalculateSpeedAngle+0x164>
    {
      Encoder[MOTOR1].TargetRPM = MAXRPM;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ab0:	611a      	str	r2, [r3, #16]
      Encoder[MOTOR2].TargetRPM = MAXRPM;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	3324      	adds	r3, #36	; 0x24
 8001ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ab8:	611a      	str	r2, [r3, #16]
 8001aba:	e075      	b.n	8001ba8 <CalculateSpeedAngle+0x250>
    }
    else if(ControlINFO->SteeringAngle > 20.0 && ControlINFO->SteeringAngle < 70.0)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4953      	ldr	r1, [pc, #332]	; (8001c10 <CalculateSpeedAngle+0x2b8>)
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fa2a 	bl	8000f1c <__aeabi_fcmpgt>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d031      	beq.n	8001b32 <CalculateSpeedAngle+0x1da>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4950      	ldr	r1, [pc, #320]	; (8001c14 <CalculateSpeedAngle+0x2bc>)
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fa03 	bl	8000ee0 <__aeabi_fcmplt>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d028      	beq.n	8001b32 <CalculateSpeedAngle+0x1da>
    {
#if use
      Encoder[MOTOR1].TargetRPM = MAXRPM;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ae4:	611a      	str	r2, [r3, #16]
      Encoder[MOTOR2].TargetRPM = MAXRPM * ((90 - ControlINFO->SteeringAngle) / 90.0);
 8001ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ae8:	f7fe fc94 	bl	8000414 <__aeabi_f2d>
 8001aec:	4604      	mov	r4, r0
 8001aee:	460d      	mov	r5, r1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	4619      	mov	r1, r3
 8001af6:	4841      	ldr	r0, [pc, #260]	; (8001bfc <CalculateSpeedAngle+0x2a4>)
 8001af8:	f7fe ff4a 	bl	8000990 <__aeabi_fsub>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fc88 	bl	8000414 <__aeabi_f2d>
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	4b44      	ldr	r3, [pc, #272]	; (8001c1c <CalculateSpeedAngle+0x2c4>)
 8001b0a:	f7fe fe05 	bl	8000718 <__aeabi_ddiv>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4620      	mov	r0, r4
 8001b14:	4629      	mov	r1, r5
 8001b16:	f7fe fcd5 	bl	80004c4 <__aeabi_dmul>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001b28:	f7fe fede 	bl	80008e8 <__aeabi_d2f>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	6123      	str	r3, [r4, #16]
 8001b30:	e03a      	b.n	8001ba8 <CalculateSpeedAngle+0x250>
      Encoder[MOTOR2].TargetRPM = (MAXRPM / 2.0) * (1 - ControlINFO->SteeringAngle / 90.0);
      Encoder[MOTOR1].TargetRPM = 320000.0 / Encoder[MOTOR1].TargetRPM; // 400 * 800
      Encoder[MOTOR2].TargetRPM = 2.000000 * Encoder[MOTOR2].TargetRPM;
#endif
    }
    else if(ControlINFO->SteeringAngle < -20.0 && ControlINFO->SteeringAngle > -70.0)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4935      	ldr	r1, [pc, #212]	; (8001c0c <CalculateSpeedAngle+0x2b4>)
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff f9d1 	bl	8000ee0 <__aeabi_fcmplt>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d031      	beq.n	8001ba8 <CalculateSpeedAngle+0x250>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4933      	ldr	r1, [pc, #204]	; (8001c18 <CalculateSpeedAngle+0x2c0>)
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f9e6 	bl	8000f1c <__aeabi_fcmpgt>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d028      	beq.n	8001ba8 <CalculateSpeedAngle+0x250>
    {
#if use
      Encoder[MOTOR1].TargetRPM = MAXRPM * ((90 - fabsf(ControlINFO->SteeringAngle)) / 90.0);
 8001b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b58:	f7fe fc5c 	bl	8000414 <__aeabi_f2d>
 8001b5c:	4604      	mov	r4, r0
 8001b5e:	460d      	mov	r5, r1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4824      	ldr	r0, [pc, #144]	; (8001bfc <CalculateSpeedAngle+0x2a4>)
 8001b6c:	f7fe ff10 	bl	8000990 <__aeabi_fsub>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fc4e 	bl	8000414 <__aeabi_f2d>
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	4b27      	ldr	r3, [pc, #156]	; (8001c1c <CalculateSpeedAngle+0x2c4>)
 8001b7e:	f7fe fdcb 	bl	8000718 <__aeabi_ddiv>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4620      	mov	r0, r4
 8001b88:	4629      	mov	r1, r5
 8001b8a:	f7fe fc9b 	bl	80004c4 <__aeabi_dmul>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	f7fe fea7 	bl	80008e8 <__aeabi_d2f>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
      Encoder[MOTOR2].TargetRPM = MAXRPM;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	3324      	adds	r3, #36	; 0x24
 8001ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ba6:	611a      	str	r2, [r3, #16]
      Encoder[MOTOR1].TargetRPM = 2.000000 * Encoder[MOTOR1].TargetRPM; // 400 * 800
      Encoder[MOTOR2].TargetRPM = 320000.0 / Encoder[MOTOR2].TargetRPM;
#endif
    }

    if     (Encoder[MOTOR1].TargetRPM > MAXRPM) Encoder[MOTOR1].TargetRPM = MAXRPM;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4619      	mov	r1, r3
 8001bae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001bb0:	f7ff f996 	bl	8000ee0 <__aeabi_fcmplt>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <CalculateSpeedAngle+0x26a>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bbe:	611a      	str	r2, [r3, #16]
 8001bc0:	e00d      	b.n	8001bde <CalculateSpeedAngle+0x286>
    else if(Encoder[MOTOR1].TargetRPM <      0) Encoder[MOTOR1].TargetRPM = 0;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	f04f 0100 	mov.w	r1, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff f988 	bl	8000ee0 <__aeabi_fcmplt>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <CalculateSpeedAngle+0x286>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
    if     (Encoder[MOTOR2].TargetRPM > MAXRPM) Encoder[MOTOR2].TargetRPM = MAXRPM;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	3324      	adds	r3, #36	; 0x24
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	4619      	mov	r1, r3
 8001be6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001be8:	f7ff f97a 	bl	8000ee0 <__aeabi_fcmplt>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d016      	beq.n	8001c20 <CalculateSpeedAngle+0x2c8>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3324      	adds	r3, #36	; 0x24
 8001bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bf8:	611a      	str	r2, [r3, #16]
 8001bfa:	e021      	b.n	8001c40 <CalculateSpeedAngle+0x2e8>
 8001bfc:	42b40000 	.word	0x42b40000
 8001c00:	43340000 	.word	0x43340000
 8001c04:	c2b40000 	.word	0xc2b40000
 8001c08:	c3340000 	.word	0xc3340000
 8001c0c:	c1a00000 	.word	0xc1a00000
 8001c10:	41a00000 	.word	0x41a00000
 8001c14:	428c0000 	.word	0x428c0000
 8001c18:	c28c0000 	.word	0xc28c0000
 8001c1c:	40568000 	.word	0x40568000
    else if(Encoder[MOTOR2].TargetRPM <      0) Encoder[MOTOR2].TargetRPM = 0;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3324      	adds	r3, #36	; 0x24
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f04f 0100 	mov.w	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff f958 	bl	8000ee0 <__aeabi_fcmplt>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d004      	beq.n	8001c40 <CalculateSpeedAngle+0x2e8>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	3324      	adds	r3, #36	; 0x24
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]

    Encoder[MOTOR1].TargetRPM = Encoder[MOTOR1].TargetRPM * (ControlINFO->MotorSpeed / 100.0);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fbe5 	bl	8000414 <__aeabi_f2d>
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	460d      	mov	r5, r1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fbde 	bl	8000414 <__aeabi_f2d>
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <CalculateSpeedAngle+0x378>)
 8001c5e:	f7fe fd5b 	bl	8000718 <__aeabi_ddiv>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4620      	mov	r0, r4
 8001c68:	4629      	mov	r1, r5
 8001c6a:	f7fe fc2b 	bl	80004c4 <__aeabi_dmul>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	f7fe fe37 	bl	80008e8 <__aeabi_d2f>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
    Encoder[MOTOR2].TargetRPM = Encoder[MOTOR2].TargetRPM * (ControlINFO->MotorSpeed / 100.0);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	3324      	adds	r3, #36	; 0x24
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fbc4 	bl	8000414 <__aeabi_f2d>
 8001c8c:	4604      	mov	r4, r0
 8001c8e:	460d      	mov	r5, r1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fbbd 	bl	8000414 <__aeabi_f2d>
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <CalculateSpeedAngle+0x378>)
 8001ca0:	f7fe fd3a 	bl	8000718 <__aeabi_ddiv>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4620      	mov	r0, r4
 8001caa:	4629      	mov	r1, r5
 8001cac:	f7fe fc0a 	bl	80004c4 <__aeabi_dmul>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001cbe:	f7fe fe13 	bl	80008e8 <__aeabi_d2f>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6123      	str	r3, [r4, #16]

//    Encoder[MOTOR1].TargetPWM = CalculateTargetPWM(Coefficient, ControlINFO->MotorSpeed);
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40590000 	.word	0x40590000

08001cd4 <MessageProcess>:

static void MessageProcess(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af02      	add	r7, sp, #8
  if(Count.UART >= 100)
 8001cda:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <MessageProcess+0xb0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b63      	cmp	r3, #99	; 0x63
 8001ce0:	d94c      	bls.n	8001d7c <MessageProcess+0xa8>
  {
    Count.UART = 0;
 8001ce2:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <MessageProcess+0xb0>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
    ControlMsg.MessageSize = QueueFindControlMessage(&ControlMsg, BUFFER_SIZE);
 8001ce8:	2114      	movs	r1, #20
 8001cea:	4827      	ldr	r0, [pc, #156]	; (8001d88 <MessageProcess+0xb4>)
 8001cec:	f7ff faa6 	bl	800123c <QueueFindControlMessage>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <MessageProcess+0xb4>)
 8001cf6:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

    if(ControlMsg.MessageSize > 0 && ControlMsg.TmpData[0] == 0xF1)
 8001cfa:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <MessageProcess+0xb4>)
 8001cfc:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d03b      	beq.n	8001d7c <MessageProcess+0xa8>
 8001d04:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <MessageProcess+0xb4>)
 8001d06:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8001d0a:	2bf1      	cmp	r3, #241	; 0xf1
 8001d0c:	d136      	bne.n	8001d7c <MessageProcess+0xa8>
    {
      switch(ControlMsg.TmpData[2])
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <MessageProcess+0xb4>)
 8001d10:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001d14:	2b63      	cmp	r3, #99	; 0x63
 8001d16:	d02c      	beq.n	8001d72 <MessageProcess+0x9e>
 8001d18:	2b63      	cmp	r3, #99	; 0x63
 8001d1a:	dc30      	bgt.n	8001d7e <MessageProcess+0xaa>
 8001d1c:	2b41      	cmp	r3, #65	; 0x41
 8001d1e:	d023      	beq.n	8001d68 <MessageProcess+0x94>
 8001d20:	2b41      	cmp	r3, #65	; 0x41
 8001d22:	dc2c      	bgt.n	8001d7e <MessageProcess+0xaa>
 8001d24:	2b40      	cmp	r3, #64	; 0x40
 8001d26:	d01a      	beq.n	8001d5e <MessageProcess+0x8a>
 8001d28:	2b40      	cmp	r3, #64	; 0x40
 8001d2a:	dc28      	bgt.n	8001d7e <MessageProcess+0xaa>
 8001d2c:	2b10      	cmp	r3, #16
 8001d2e:	d002      	beq.n	8001d36 <MessageProcess+0x62>
 8001d30:	2b30      	cmp	r3, #48	; 0x30
 8001d32:	d00b      	beq.n	8001d4c <MessageProcess+0x78>
        case 0x41: SendAuthor_Lkl(&huart1, ControlMsg.TmpData); break;
        case 0x63: SendCatPattern(&huart1, ControlMsg.TmpData); break;
      }
    }
  }
}
 8001d34:	e023      	b.n	8001d7e <MessageProcess+0xaa>
          CalculateSpeedAngle(Encoder, MOTOR_PID, &ControlINFO, ControlMsg.TmpData, 400.0f, Coefficient);
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <MessageProcess+0xb8>)
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <MessageProcess+0xbc>)
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <MessageProcess+0xc0>)
 8001d40:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <MessageProcess+0xc4>)
 8001d42:	4916      	ldr	r1, [pc, #88]	; (8001d9c <MessageProcess+0xc8>)
 8001d44:	4816      	ldr	r0, [pc, #88]	; (8001da0 <MessageProcess+0xcc>)
 8001d46:	f7ff fe07 	bl	8001958 <CalculateSpeedAngle>
          break;
 8001d4a:	e018      	b.n	8001d7e <MessageProcess+0xaa>
          PWM_LimitCal.CalState[MOTOR1] = STARTCAL;
 8001d4c:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <MessageProcess+0xd0>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          SendINFO(&huart1, "Start Calibration Coefficient point\n");
 8001d54:	4914      	ldr	r1, [pc, #80]	; (8001da8 <MessageProcess+0xd4>)
 8001d56:	4815      	ldr	r0, [pc, #84]	; (8001dac <MessageProcess+0xd8>)
 8001d58:	f7ff fd7a 	bl	8001850 <SendINFO>
          break;
 8001d5c:	e00f      	b.n	8001d7e <MessageProcess+0xaa>
          SendINFO(&huart1, "test ok\n");
 8001d5e:	4914      	ldr	r1, [pc, #80]	; (8001db0 <MessageProcess+0xdc>)
 8001d60:	4812      	ldr	r0, [pc, #72]	; (8001dac <MessageProcess+0xd8>)
 8001d62:	f7ff fd75 	bl	8001850 <SendINFO>
          break;
 8001d66:	e00a      	b.n	8001d7e <MessageProcess+0xaa>
        case 0x41: SendAuthor_Lkl(&huart1, ControlMsg.TmpData); break;
 8001d68:	490a      	ldr	r1, [pc, #40]	; (8001d94 <MessageProcess+0xc0>)
 8001d6a:	4810      	ldr	r0, [pc, #64]	; (8001dac <MessageProcess+0xd8>)
 8001d6c:	f7ff f8fa 	bl	8000f64 <SendAuthor_Lkl>
 8001d70:	e005      	b.n	8001d7e <MessageProcess+0xaa>
        case 0x63: SendCatPattern(&huart1, ControlMsg.TmpData); break;
 8001d72:	4908      	ldr	r1, [pc, #32]	; (8001d94 <MessageProcess+0xc0>)
 8001d74:	480d      	ldr	r0, [pc, #52]	; (8001dac <MessageProcess+0xd8>)
 8001d76:	f7ff f8db 	bl	8000f30 <SendCatPattern>
 8001d7a:	e000      	b.n	8001d7e <MessageProcess+0xaa>
    }
 8001d7c:	bf00      	nop
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000624 	.word	0x20000624
 8001d88:	2000046c 	.word	0x2000046c
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	43c80000 	.word	0x43c80000
 8001d94:	20000502 	.word	0x20000502
 8001d98:	20000558 	.word	0x20000558
 8001d9c:	200005ac 	.word	0x200005ac
 8001da0:	20000564 	.word	0x20000564
 8001da4:	20000520 	.word	0x20000520
 8001da8:	080056c0 	.word	0x080056c0
 8001dac:	20000424 	.word	0x20000424
 8001db0:	080056e8 	.word	0x080056e8

08001db4 <MOTOR_Control>:

static void MOTOR_Control(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  if(Count.PID_Ctrl >= 25 && ((ControlMsg.TmpData[2] == 0x10 && ControlINFO.MotorSpeed != 0.0) || PWM_LimitCal.CalState[MOTOR1] != NONECTRL))
 8001db8:	4b23      	ldr	r3, [pc, #140]	; (8001e48 <MOTOR_Control+0x94>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b18      	cmp	r3, #24
 8001dbe:	d921      	bls.n	8001e04 <MOTOR_Control+0x50>
 8001dc0:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <MOTOR_Control+0x98>)
 8001dc2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001dc6:	2b10      	cmp	r3, #16
 8001dc8:	d109      	bne.n	8001dde <MOTOR_Control+0x2a>
 8001dca:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <MOTOR_Control+0x9c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f04f 0100 	mov.w	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff f87a 	bl	8000ecc <__aeabi_fcmpeq>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d004      	beq.n	8001de8 <MOTOR_Control+0x34>
 8001dde:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <MOTOR_Control+0xa0>)
 8001de0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00d      	beq.n	8001e04 <MOTOR_Control+0x50>
  {
    Count.PID_Ctrl = 0;
 8001de8:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <MOTOR_Control+0x94>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	605a      	str	r2, [r3, #4]
    CalculateSpeed(&htim3, &Encoder[MOTOR1]);
 8001dee:	491a      	ldr	r1, [pc, #104]	; (8001e58 <MOTOR_Control+0xa4>)
 8001df0:	481a      	ldr	r0, [pc, #104]	; (8001e5c <MOTOR_Control+0xa8>)
 8001df2:	f7ff f911 	bl	8001018 <CalculateSpeed>
    CalculateSpeed(&htim4, &Encoder[MOTOR2]);
 8001df6:	491a      	ldr	r1, [pc, #104]	; (8001e60 <MOTOR_Control+0xac>)
 8001df8:	481a      	ldr	r0, [pc, #104]	; (8001e64 <MOTOR_Control+0xb0>)
 8001dfa:	f7ff f90d 	bl	8001018 <CalculateSpeed>
//      case Anticlockwise:
//        TIM2->CCR2 = (uint32_t)PID_Compute(&MOTOR_PID[MOTOR1], Encoder[MOTOR1]); TIM2->CCR1 = 0;
//        TIM2->CCR3 = (uint32_t)PID_Compute(&MOTOR_PID[MOTOR2], Encoder[MOTOR2]); TIM2->CCR4 = 0;
//        break;

      default: break;
 8001dfe:	bf00      	nop
    switch(ControlINFO.Action)
 8001e00:	bf00      	nop
  else if(ControlINFO.MotorSpeed == 0.0)
  {
    PID_ParameterClear(&MOTOR_PID[MOTOR1]); TIM2->CCR1 = TIM2->CCR2 = 0;
    PID_ParameterClear(&MOTOR_PID[MOTOR2]); TIM2->CCR3 = TIM2->CCR4 = 0;
  }
}
 8001e02:	e01e      	b.n	8001e42 <MOTOR_Control+0x8e>
  else if(ControlINFO.MotorSpeed == 0.0)
 8001e04:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <MOTOR_Control+0x9c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f04f 0100 	mov.w	r1, #0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff f85d 	bl	8000ecc <__aeabi_fcmpeq>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d100      	bne.n	8001e1a <MOTOR_Control+0x66>
}
 8001e18:	e013      	b.n	8001e42 <MOTOR_Control+0x8e>
    PID_ParameterClear(&MOTOR_PID[MOTOR1]); TIM2->CCR1 = TIM2->CCR2 = 0;
 8001e1a:	4813      	ldr	r0, [pc, #76]	; (8001e68 <MOTOR_Control+0xb4>)
 8001e1c:	f7ff f8e7 	bl	8000fee <PID_ParameterClear>
 8001e20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e24:	2300      	movs	r3, #0
 8001e26:	6393      	str	r3, [r2, #56]	; 0x38
 8001e28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e2c:	6353      	str	r3, [r2, #52]	; 0x34
    PID_ParameterClear(&MOTOR_PID[MOTOR2]); TIM2->CCR3 = TIM2->CCR4 = 0;
 8001e2e:	480f      	ldr	r0, [pc, #60]	; (8001e6c <MOTOR_Control+0xb8>)
 8001e30:	f7ff f8dd 	bl	8000fee <PID_ParameterClear>
 8001e34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e38:	2300      	movs	r3, #0
 8001e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e40:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000624 	.word	0x20000624
 8001e4c:	2000046c 	.word	0x2000046c
 8001e50:	20000558 	.word	0x20000558
 8001e54:	20000520 	.word	0x20000520
 8001e58:	20000564 	.word	0x20000564
 8001e5c:	20000394 	.word	0x20000394
 8001e60:	20000588 	.word	0x20000588
 8001e64:	200003dc 	.word	0x200003dc
 8001e68:	200005ac 	.word	0x200005ac
 8001e6c:	200005e8 	.word	0x200005e8

08001e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e74:	b672      	cpsid	i
}
 8001e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <Error_Handler+0x8>
	...

08001e7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <HAL_MspInit+0x5c>)
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	4a14      	ldr	r2, [pc, #80]	; (8001ed8 <HAL_MspInit+0x5c>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6193      	str	r3, [r2, #24]
 8001e8e:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_MspInit+0x5c>)
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <HAL_MspInit+0x5c>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	4a0e      	ldr	r2, [pc, #56]	; (8001ed8 <HAL_MspInit+0x5c>)
 8001ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	61d3      	str	r3, [r2, #28]
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <HAL_MspInit+0x5c>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_MspInit+0x60>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	4a04      	ldr	r2, [pc, #16]	; (8001edc <HAL_MspInit+0x60>)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40010000 	.word	0x40010000

08001ee0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0310 	add.w	r3, r7, #16
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a16      	ldr	r2, [pc, #88]	; (8001f54 <HAL_I2C_MspInit+0x74>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d124      	bne.n	8001f4a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f00:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <HAL_I2C_MspInit+0x78>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	4a14      	ldr	r2, [pc, #80]	; (8001f58 <HAL_I2C_MspInit+0x78>)
 8001f06:	f043 0308 	orr.w	r3, r3, #8
 8001f0a:	6193      	str	r3, [r2, #24]
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_I2C_MspInit+0x78>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f18:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f1e:	2312      	movs	r3, #18
 8001f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f22:	2303      	movs	r3, #3
 8001f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f26:	f107 0310 	add.w	r3, r7, #16
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	480b      	ldr	r0, [pc, #44]	; (8001f5c <HAL_I2C_MspInit+0x7c>)
 8001f2e:	f000 fc17 	bl	8002760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <HAL_I2C_MspInit+0x78>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	4a08      	ldr	r2, [pc, #32]	; (8001f58 <HAL_I2C_MspInit+0x78>)
 8001f38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f3c:	61d3      	str	r3, [r2, #28]
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_I2C_MspInit+0x78>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f4a:	bf00      	nop
 8001f4c:	3720      	adds	r7, #32
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40005800 	.word	0x40005800
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40010c00 	.word	0x40010c00

08001f60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f70:	d10b      	bne.n	8001f8a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <HAL_TIM_PWM_MspInit+0x34>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	4a07      	ldr	r2, [pc, #28]	; (8001f94 <HAL_TIM_PWM_MspInit+0x34>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	61d3      	str	r3, [r2, #28]
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_TIM_PWM_MspInit+0x34>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f8a:	bf00      	nop
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	40021000 	.word	0x40021000

08001f98 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08a      	sub	sp, #40	; 0x28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0318 	add.w	r3, r7, #24
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a2a      	ldr	r2, [pc, #168]	; (800205c <HAL_TIM_Encoder_MspInit+0xc4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d124      	bne.n	8002002 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fb8:	4b29      	ldr	r3, [pc, #164]	; (8002060 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	4a28      	ldr	r2, [pc, #160]	; (8002060 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001fbe:	f043 0302 	orr.w	r3, r3, #2
 8001fc2:	61d3      	str	r3, [r2, #28]
 8001fc4:	4b26      	ldr	r3, [pc, #152]	; (8002060 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd0:	4b23      	ldr	r3, [pc, #140]	; (8002060 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	4a22      	ldr	r2, [pc, #136]	; (8002060 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001fd6:	f043 0304 	orr.w	r3, r3, #4
 8001fda:	6193      	str	r3, [r2, #24]
 8001fdc:	4b20      	ldr	r3, [pc, #128]	; (8002060 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fe8:	23c0      	movs	r3, #192	; 0xc0
 8001fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	f107 0318 	add.w	r3, r7, #24
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	481a      	ldr	r0, [pc, #104]	; (8002064 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001ffc:	f000 fbb0 	bl	8002760 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002000:	e028      	b.n	8002054 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM4)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a18      	ldr	r2, [pc, #96]	; (8002068 <HAL_TIM_Encoder_MspInit+0xd0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d123      	bne.n	8002054 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800200c:	4b14      	ldr	r3, [pc, #80]	; (8002060 <HAL_TIM_Encoder_MspInit+0xc8>)
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	4a13      	ldr	r2, [pc, #76]	; (8002060 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002012:	f043 0304 	orr.w	r3, r3, #4
 8002016:	61d3      	str	r3, [r2, #28]
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <HAL_TIM_Encoder_MspInit+0xc8>)
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002024:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	4a0d      	ldr	r2, [pc, #52]	; (8002060 <HAL_TIM_Encoder_MspInit+0xc8>)
 800202a:	f043 0308 	orr.w	r3, r3, #8
 800202e:	6193      	str	r3, [r2, #24]
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800203c:	23c0      	movs	r3, #192	; 0xc0
 800203e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002048:	f107 0318 	add.w	r3, r7, #24
 800204c:	4619      	mov	r1, r3
 800204e:	4807      	ldr	r0, [pc, #28]	; (800206c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002050:	f000 fb86 	bl	8002760 <HAL_GPIO_Init>
}
 8002054:	bf00      	nop
 8002056:	3728      	adds	r7, #40	; 0x28
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40000400 	.word	0x40000400
 8002060:	40021000 	.word	0x40021000
 8002064:	40010800 	.word	0x40010800
 8002068:	40000800 	.word	0x40000800
 800206c:	40010c00 	.word	0x40010c00

08002070 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 0310 	add.w	r3, r7, #16
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208e:	d117      	bne.n	80020c0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002090:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <HAL_TIM_MspPostInit+0x58>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	4a0c      	ldr	r2, [pc, #48]	; (80020c8 <HAL_TIM_MspPostInit+0x58>)
 8002096:	f043 0304 	orr.w	r3, r3, #4
 800209a:	6193      	str	r3, [r2, #24]
 800209c:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_TIM_MspPostInit+0x58>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80020a8:	230f      	movs	r3, #15
 80020aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2302      	movs	r3, #2
 80020b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b4:	f107 0310 	add.w	r3, r7, #16
 80020b8:	4619      	mov	r1, r3
 80020ba:	4804      	ldr	r0, [pc, #16]	; (80020cc <HAL_TIM_MspPostInit+0x5c>)
 80020bc:	f000 fb50 	bl	8002760 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80020c0:	bf00      	nop
 80020c2:	3720      	adds	r7, #32
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40010800 	.word	0x40010800

080020d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0310 	add.w	r3, r7, #16
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a20      	ldr	r2, [pc, #128]	; (800216c <HAL_UART_MspInit+0x9c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d139      	bne.n	8002164 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020f0:	4b1f      	ldr	r3, [pc, #124]	; (8002170 <HAL_UART_MspInit+0xa0>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	4a1e      	ldr	r2, [pc, #120]	; (8002170 <HAL_UART_MspInit+0xa0>)
 80020f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020fa:	6193      	str	r3, [r2, #24]
 80020fc:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <HAL_UART_MspInit+0xa0>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002108:	4b19      	ldr	r3, [pc, #100]	; (8002170 <HAL_UART_MspInit+0xa0>)
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	4a18      	ldr	r2, [pc, #96]	; (8002170 <HAL_UART_MspInit+0xa0>)
 800210e:	f043 0304 	orr.w	r3, r3, #4
 8002112:	6193      	str	r3, [r2, #24]
 8002114:	4b16      	ldr	r3, [pc, #88]	; (8002170 <HAL_UART_MspInit+0xa0>)
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002124:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800212a:	2303      	movs	r3, #3
 800212c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212e:	f107 0310 	add.w	r3, r7, #16
 8002132:	4619      	mov	r1, r3
 8002134:	480f      	ldr	r0, [pc, #60]	; (8002174 <HAL_UART_MspInit+0xa4>)
 8002136:	f000 fb13 	bl	8002760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800213a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800213e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002148:	f107 0310 	add.w	r3, r7, #16
 800214c:	4619      	mov	r1, r3
 800214e:	4809      	ldr	r0, [pc, #36]	; (8002174 <HAL_UART_MspInit+0xa4>)
 8002150:	f000 fb06 	bl	8002760 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002154:	2200      	movs	r2, #0
 8002156:	2100      	movs	r1, #0
 8002158:	2025      	movs	r0, #37	; 0x25
 800215a:	f000 fa18 	bl	800258e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800215e:	2025      	movs	r0, #37	; 0x25
 8002160:	f000 fa31 	bl	80025c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002164:	bf00      	nop
 8002166:	3720      	adds	r7, #32
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40013800 	.word	0x40013800
 8002170:	40021000 	.word	0x40021000
 8002174:	40010800 	.word	0x40010800

08002178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800217c:	e7fe      	b.n	800217c <NMI_Handler+0x4>

0800217e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002182:	e7fe      	b.n	8002182 <HardFault_Handler+0x4>

08002184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002188:	e7fe      	b.n	8002188 <MemManage_Handler+0x4>

0800218a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800218e:	e7fe      	b.n	800218e <BusFault_Handler+0x4>

08002190 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002194:	e7fe      	b.n	8002194 <UsageFault_Handler+0x4>

08002196 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr

080021a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr

080021ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
	...

080021bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  Count.PID_Ctrl++;
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <SysTick_Handler+0x20>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	3301      	adds	r3, #1
 80021c6:	4a05      	ldr	r2, [pc, #20]	; (80021dc <SysTick_Handler+0x20>)
 80021c8:	6053      	str	r3, [r2, #4]
  Count.UART++;
 80021ca:	4b04      	ldr	r3, [pc, #16]	; (80021dc <SysTick_Handler+0x20>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	3301      	adds	r3, #1
 80021d0:	4a02      	ldr	r2, [pc, #8]	; (80021dc <SysTick_Handler+0x20>)
 80021d2:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d4:	f000 f8c4 	bl	8002360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000624 	.word	0x20000624

080021e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if(USART1->SR & USART_SR_RXNE)
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <USART1_IRQHandler+0x28>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0320 	and.w	r3, r3, #32
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <USART1_IRQHandler+0x1c>
    QueuePush((uint8_t)USART1->DR);
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <USART1_IRQHandler+0x28>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe ffbc 	bl	8001174 <QueuePush>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021fc:	4803      	ldr	r0, [pc, #12]	; (800220c <USART1_IRQHandler+0x2c>)
 80021fe:	f001 ffbf 	bl	8004180 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40013800 	.word	0x40013800
 800220c:	20000424 	.word	0x20000424

08002210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002218:	4a14      	ldr	r2, [pc, #80]	; (800226c <_sbrk+0x5c>)
 800221a:	4b15      	ldr	r3, [pc, #84]	; (8002270 <_sbrk+0x60>)
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002224:	4b13      	ldr	r3, [pc, #76]	; (8002274 <_sbrk+0x64>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d102      	bne.n	8002232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <_sbrk+0x64>)
 800222e:	4a12      	ldr	r2, [pc, #72]	; (8002278 <_sbrk+0x68>)
 8002230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <_sbrk+0x64>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	429a      	cmp	r2, r3
 800223e:	d207      	bcs.n	8002250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002240:	f002 fcd8 	bl	8004bf4 <__errno>
 8002244:	4603      	mov	r3, r0
 8002246:	220c      	movs	r2, #12
 8002248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800224a:	f04f 33ff 	mov.w	r3, #4294967295
 800224e:	e009      	b.n	8002264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <_sbrk+0x64>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002256:	4b07      	ldr	r3, [pc, #28]	; (8002274 <_sbrk+0x64>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	4a05      	ldr	r2, [pc, #20]	; (8002274 <_sbrk+0x64>)
 8002260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002262:	68fb      	ldr	r3, [r7, #12]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20005000 	.word	0x20005000
 8002270:	00000400 	.word	0x00000400
 8002274:	2000062c 	.word	0x2000062c
 8002278:	20000648 	.word	0x20000648

0800227c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002288:	f7ff fff8 	bl	800227c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800228c:	480b      	ldr	r0, [pc, #44]	; (80022bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800228e:	490c      	ldr	r1, [pc, #48]	; (80022c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002290:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002294:	e002      	b.n	800229c <LoopCopyDataInit>

08002296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800229a:	3304      	adds	r3, #4

0800229c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800229c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800229e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a0:	d3f9      	bcc.n	8002296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022a2:	4a09      	ldr	r2, [pc, #36]	; (80022c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022a4:	4c09      	ldr	r4, [pc, #36]	; (80022cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a8:	e001      	b.n	80022ae <LoopFillZerobss>

080022aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022ac:	3204      	adds	r2, #4

080022ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b0:	d3fb      	bcc.n	80022aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022b2:	f002 fca5 	bl	8004c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022b6:	f7ff f85f 	bl	8001378 <main>
  bx lr
 80022ba:	4770      	bx	lr
  ldr r0, =_sdata
 80022bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c0:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80022c4:	0800575c 	.word	0x0800575c
  ldr r2, =_sbss
 80022c8:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80022cc:	20000644 	.word	0x20000644

080022d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022d0:	e7fe      	b.n	80022d0 <ADC1_2_IRQHandler>
	...

080022d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <HAL_Init+0x28>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a07      	ldr	r2, [pc, #28]	; (80022fc <HAL_Init+0x28>)
 80022de:	f043 0310 	orr.w	r3, r3, #16
 80022e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e4:	2003      	movs	r0, #3
 80022e6:	f000 f947 	bl	8002578 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ea:	200f      	movs	r0, #15
 80022ec:	f000 f808 	bl	8002300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022f0:	f7ff fdc4 	bl	8001e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40022000 	.word	0x40022000

08002300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002308:	4b12      	ldr	r3, [pc, #72]	; (8002354 <HAL_InitTick+0x54>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_InitTick+0x58>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	4619      	mov	r1, r3
 8002312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002316:	fbb3 f3f1 	udiv	r3, r3, r1
 800231a:	fbb2 f3f3 	udiv	r3, r2, r3
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f95f 	bl	80025e2 <HAL_SYSTICK_Config>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e00e      	b.n	800234c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b0f      	cmp	r3, #15
 8002332:	d80a      	bhi.n	800234a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002334:	2200      	movs	r2, #0
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	f04f 30ff 	mov.w	r0, #4294967295
 800233c:	f000 f927 	bl	800258e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002340:	4a06      	ldr	r2, [pc, #24]	; (800235c <HAL_InitTick+0x5c>)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	e000      	b.n	800234c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000060 	.word	0x20000060
 8002358:	20000068 	.word	0x20000068
 800235c:	20000064 	.word	0x20000064

08002360 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_IncTick+0x1c>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_IncTick+0x20>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4413      	add	r3, r2
 8002370:	4a03      	ldr	r2, [pc, #12]	; (8002380 <HAL_IncTick+0x20>)
 8002372:	6013      	str	r3, [r2, #0]
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	20000068 	.word	0x20000068
 8002380:	20000630 	.word	0x20000630

08002384 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return uwTick;
 8002388:	4b02      	ldr	r3, [pc, #8]	; (8002394 <HAL_GetTick+0x10>)
 800238a:	681b      	ldr	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	20000630 	.word	0x20000630

08002398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023a0:	f7ff fff0 	bl	8002384 <HAL_GetTick>
 80023a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b0:	d005      	beq.n	80023be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023b2:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <HAL_Delay+0x44>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4413      	add	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023be:	bf00      	nop
 80023c0:	f7ff ffe0 	bl	8002384 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d8f7      	bhi.n	80023c0 <HAL_Delay+0x28>
  {
  }
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000068 	.word	0x20000068

080023e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <__NVIC_SetPriorityGrouping+0x44>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023fc:	4013      	ands	r3, r2
 80023fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800240c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002412:	4a04      	ldr	r2, [pc, #16]	; (8002424 <__NVIC_SetPriorityGrouping+0x44>)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	60d3      	str	r3, [r2, #12]
}
 8002418:	bf00      	nop
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <__NVIC_GetPriorityGrouping+0x18>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	f003 0307 	and.w	r3, r3, #7
}
 8002436:	4618      	mov	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	2b00      	cmp	r3, #0
 8002454:	db0b      	blt.n	800246e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	f003 021f 	and.w	r2, r3, #31
 800245c:	4906      	ldr	r1, [pc, #24]	; (8002478 <__NVIC_EnableIRQ+0x34>)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	2001      	movs	r0, #1
 8002466:	fa00 f202 	lsl.w	r2, r0, r2
 800246a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	e000e100 	.word	0xe000e100

0800247c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	6039      	str	r1, [r7, #0]
 8002486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248c:	2b00      	cmp	r3, #0
 800248e:	db0a      	blt.n	80024a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	b2da      	uxtb	r2, r3
 8002494:	490c      	ldr	r1, [pc, #48]	; (80024c8 <__NVIC_SetPriority+0x4c>)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	0112      	lsls	r2, r2, #4
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	440b      	add	r3, r1
 80024a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a4:	e00a      	b.n	80024bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	4908      	ldr	r1, [pc, #32]	; (80024cc <__NVIC_SetPriority+0x50>)
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	3b04      	subs	r3, #4
 80024b4:	0112      	lsls	r2, r2, #4
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	440b      	add	r3, r1
 80024ba:	761a      	strb	r2, [r3, #24]
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	e000e100 	.word	0xe000e100
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	; 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f1c3 0307 	rsb	r3, r3, #7
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	bf28      	it	cs
 80024ee:	2304      	movcs	r3, #4
 80024f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3304      	adds	r3, #4
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d902      	bls.n	8002500 <NVIC_EncodePriority+0x30>
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3b03      	subs	r3, #3
 80024fe:	e000      	b.n	8002502 <NVIC_EncodePriority+0x32>
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	f04f 32ff 	mov.w	r2, #4294967295
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43da      	mvns	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	401a      	ands	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002518:	f04f 31ff 	mov.w	r1, #4294967295
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	43d9      	mvns	r1, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002528:	4313      	orrs	r3, r2
         );
}
 800252a:	4618      	mov	r0, r3
 800252c:	3724      	adds	r7, #36	; 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3b01      	subs	r3, #1
 8002540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002544:	d301      	bcc.n	800254a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002546:	2301      	movs	r3, #1
 8002548:	e00f      	b.n	800256a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800254a:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <SysTick_Config+0x40>)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3b01      	subs	r3, #1
 8002550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002552:	210f      	movs	r1, #15
 8002554:	f04f 30ff 	mov.w	r0, #4294967295
 8002558:	f7ff ff90 	bl	800247c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <SysTick_Config+0x40>)
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002562:	4b04      	ldr	r3, [pc, #16]	; (8002574 <SysTick_Config+0x40>)
 8002564:	2207      	movs	r2, #7
 8002566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	e000e010 	.word	0xe000e010

08002578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff ff2d 	bl	80023e0 <__NVIC_SetPriorityGrouping>
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800258e:	b580      	push	{r7, lr}
 8002590:	b086      	sub	sp, #24
 8002592:	af00      	add	r7, sp, #0
 8002594:	4603      	mov	r3, r0
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025a0:	f7ff ff42 	bl	8002428 <__NVIC_GetPriorityGrouping>
 80025a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68b9      	ldr	r1, [r7, #8]
 80025aa:	6978      	ldr	r0, [r7, #20]
 80025ac:	f7ff ff90 	bl	80024d0 <NVIC_EncodePriority>
 80025b0:	4602      	mov	r2, r0
 80025b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b6:	4611      	mov	r1, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff5f 	bl	800247c <__NVIC_SetPriority>
}
 80025be:	bf00      	nop
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	4603      	mov	r3, r0
 80025ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff35 	bl	8002444 <__NVIC_EnableIRQ>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff ffa2 	bl	8002534 <SysTick_Config>
 80025f0:	4603      	mov	r3, r0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b085      	sub	sp, #20
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d008      	beq.n	8002624 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2204      	movs	r2, #4
 8002616:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e020      	b.n	8002666 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 020e 	bic.w	r2, r2, #14
 8002632:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0201 	bic.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264c:	2101      	movs	r1, #1
 800264e:	fa01 f202 	lsl.w	r2, r1, r2
 8002652:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002664:	7bfb      	ldrb	r3, [r7, #15]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d005      	beq.n	8002694 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2204      	movs	r2, #4
 800268c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
 8002692:	e051      	b.n	8002738 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 020e 	bic.w	r2, r2, #14
 80026a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0201 	bic.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a22      	ldr	r2, [pc, #136]	; (8002744 <HAL_DMA_Abort_IT+0xd4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d029      	beq.n	8002712 <HAL_DMA_Abort_IT+0xa2>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a21      	ldr	r2, [pc, #132]	; (8002748 <HAL_DMA_Abort_IT+0xd8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d022      	beq.n	800270e <HAL_DMA_Abort_IT+0x9e>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a1f      	ldr	r2, [pc, #124]	; (800274c <HAL_DMA_Abort_IT+0xdc>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d01a      	beq.n	8002708 <HAL_DMA_Abort_IT+0x98>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a1e      	ldr	r2, [pc, #120]	; (8002750 <HAL_DMA_Abort_IT+0xe0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d012      	beq.n	8002702 <HAL_DMA_Abort_IT+0x92>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a1c      	ldr	r2, [pc, #112]	; (8002754 <HAL_DMA_Abort_IT+0xe4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d00a      	beq.n	80026fc <HAL_DMA_Abort_IT+0x8c>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a1b      	ldr	r2, [pc, #108]	; (8002758 <HAL_DMA_Abort_IT+0xe8>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d102      	bne.n	80026f6 <HAL_DMA_Abort_IT+0x86>
 80026f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026f4:	e00e      	b.n	8002714 <HAL_DMA_Abort_IT+0xa4>
 80026f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026fa:	e00b      	b.n	8002714 <HAL_DMA_Abort_IT+0xa4>
 80026fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002700:	e008      	b.n	8002714 <HAL_DMA_Abort_IT+0xa4>
 8002702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002706:	e005      	b.n	8002714 <HAL_DMA_Abort_IT+0xa4>
 8002708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800270c:	e002      	b.n	8002714 <HAL_DMA_Abort_IT+0xa4>
 800270e:	2310      	movs	r3, #16
 8002710:	e000      	b.n	8002714 <HAL_DMA_Abort_IT+0xa4>
 8002712:	2301      	movs	r3, #1
 8002714:	4a11      	ldr	r2, [pc, #68]	; (800275c <HAL_DMA_Abort_IT+0xec>)
 8002716:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	4798      	blx	r3
    } 
  }
  return status;
 8002738:	7bfb      	ldrb	r3, [r7, #15]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40020008 	.word	0x40020008
 8002748:	4002001c 	.word	0x4002001c
 800274c:	40020030 	.word	0x40020030
 8002750:	40020044 	.word	0x40020044
 8002754:	40020058 	.word	0x40020058
 8002758:	4002006c 	.word	0x4002006c
 800275c:	40020000 	.word	0x40020000

08002760 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002760:	b480      	push	{r7}
 8002762:	b08b      	sub	sp, #44	; 0x2c
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800276a:	2300      	movs	r3, #0
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800276e:	2300      	movs	r3, #0
 8002770:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002772:	e169      	b.n	8002a48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002774:	2201      	movs	r2, #1
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	69fa      	ldr	r2, [r7, #28]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	429a      	cmp	r2, r3
 800278e:	f040 8158 	bne.w	8002a42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	4a9a      	ldr	r2, [pc, #616]	; (8002a00 <HAL_GPIO_Init+0x2a0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d05e      	beq.n	800285a <HAL_GPIO_Init+0xfa>
 800279c:	4a98      	ldr	r2, [pc, #608]	; (8002a00 <HAL_GPIO_Init+0x2a0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d875      	bhi.n	800288e <HAL_GPIO_Init+0x12e>
 80027a2:	4a98      	ldr	r2, [pc, #608]	; (8002a04 <HAL_GPIO_Init+0x2a4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d058      	beq.n	800285a <HAL_GPIO_Init+0xfa>
 80027a8:	4a96      	ldr	r2, [pc, #600]	; (8002a04 <HAL_GPIO_Init+0x2a4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d86f      	bhi.n	800288e <HAL_GPIO_Init+0x12e>
 80027ae:	4a96      	ldr	r2, [pc, #600]	; (8002a08 <HAL_GPIO_Init+0x2a8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d052      	beq.n	800285a <HAL_GPIO_Init+0xfa>
 80027b4:	4a94      	ldr	r2, [pc, #592]	; (8002a08 <HAL_GPIO_Init+0x2a8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d869      	bhi.n	800288e <HAL_GPIO_Init+0x12e>
 80027ba:	4a94      	ldr	r2, [pc, #592]	; (8002a0c <HAL_GPIO_Init+0x2ac>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d04c      	beq.n	800285a <HAL_GPIO_Init+0xfa>
 80027c0:	4a92      	ldr	r2, [pc, #584]	; (8002a0c <HAL_GPIO_Init+0x2ac>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d863      	bhi.n	800288e <HAL_GPIO_Init+0x12e>
 80027c6:	4a92      	ldr	r2, [pc, #584]	; (8002a10 <HAL_GPIO_Init+0x2b0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d046      	beq.n	800285a <HAL_GPIO_Init+0xfa>
 80027cc:	4a90      	ldr	r2, [pc, #576]	; (8002a10 <HAL_GPIO_Init+0x2b0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d85d      	bhi.n	800288e <HAL_GPIO_Init+0x12e>
 80027d2:	2b12      	cmp	r3, #18
 80027d4:	d82a      	bhi.n	800282c <HAL_GPIO_Init+0xcc>
 80027d6:	2b12      	cmp	r3, #18
 80027d8:	d859      	bhi.n	800288e <HAL_GPIO_Init+0x12e>
 80027da:	a201      	add	r2, pc, #4	; (adr r2, 80027e0 <HAL_GPIO_Init+0x80>)
 80027dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e0:	0800285b 	.word	0x0800285b
 80027e4:	08002835 	.word	0x08002835
 80027e8:	08002847 	.word	0x08002847
 80027ec:	08002889 	.word	0x08002889
 80027f0:	0800288f 	.word	0x0800288f
 80027f4:	0800288f 	.word	0x0800288f
 80027f8:	0800288f 	.word	0x0800288f
 80027fc:	0800288f 	.word	0x0800288f
 8002800:	0800288f 	.word	0x0800288f
 8002804:	0800288f 	.word	0x0800288f
 8002808:	0800288f 	.word	0x0800288f
 800280c:	0800288f 	.word	0x0800288f
 8002810:	0800288f 	.word	0x0800288f
 8002814:	0800288f 	.word	0x0800288f
 8002818:	0800288f 	.word	0x0800288f
 800281c:	0800288f 	.word	0x0800288f
 8002820:	0800288f 	.word	0x0800288f
 8002824:	0800283d 	.word	0x0800283d
 8002828:	08002851 	.word	0x08002851
 800282c:	4a79      	ldr	r2, [pc, #484]	; (8002a14 <HAL_GPIO_Init+0x2b4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d013      	beq.n	800285a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002832:	e02c      	b.n	800288e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	623b      	str	r3, [r7, #32]
          break;
 800283a:	e029      	b.n	8002890 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	3304      	adds	r3, #4
 8002842:	623b      	str	r3, [r7, #32]
          break;
 8002844:	e024      	b.n	8002890 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	3308      	adds	r3, #8
 800284c:	623b      	str	r3, [r7, #32]
          break;
 800284e:	e01f      	b.n	8002890 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	330c      	adds	r3, #12
 8002856:	623b      	str	r3, [r7, #32]
          break;
 8002858:	e01a      	b.n	8002890 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d102      	bne.n	8002868 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002862:	2304      	movs	r3, #4
 8002864:	623b      	str	r3, [r7, #32]
          break;
 8002866:	e013      	b.n	8002890 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d105      	bne.n	800287c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002870:	2308      	movs	r3, #8
 8002872:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69fa      	ldr	r2, [r7, #28]
 8002878:	611a      	str	r2, [r3, #16]
          break;
 800287a:	e009      	b.n	8002890 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800287c:	2308      	movs	r3, #8
 800287e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69fa      	ldr	r2, [r7, #28]
 8002884:	615a      	str	r2, [r3, #20]
          break;
 8002886:	e003      	b.n	8002890 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002888:	2300      	movs	r3, #0
 800288a:	623b      	str	r3, [r7, #32]
          break;
 800288c:	e000      	b.n	8002890 <HAL_GPIO_Init+0x130>
          break;
 800288e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	2bff      	cmp	r3, #255	; 0xff
 8002894:	d801      	bhi.n	800289a <HAL_GPIO_Init+0x13a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	e001      	b.n	800289e <HAL_GPIO_Init+0x13e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3304      	adds	r3, #4
 800289e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	2bff      	cmp	r3, #255	; 0xff
 80028a4:	d802      	bhi.n	80028ac <HAL_GPIO_Init+0x14c>
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	e002      	b.n	80028b2 <HAL_GPIO_Init+0x152>
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	3b08      	subs	r3, #8
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	210f      	movs	r1, #15
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	fa01 f303 	lsl.w	r3, r1, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	401a      	ands	r2, r3
 80028c4:	6a39      	ldr	r1, [r7, #32]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	fa01 f303 	lsl.w	r3, r1, r3
 80028cc:	431a      	orrs	r2, r3
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 80b1 	beq.w	8002a42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028e0:	4b4d      	ldr	r3, [pc, #308]	; (8002a18 <HAL_GPIO_Init+0x2b8>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	4a4c      	ldr	r2, [pc, #304]	; (8002a18 <HAL_GPIO_Init+0x2b8>)
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	6193      	str	r3, [r2, #24]
 80028ec:	4b4a      	ldr	r3, [pc, #296]	; (8002a18 <HAL_GPIO_Init+0x2b8>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028f8:	4a48      	ldr	r2, [pc, #288]	; (8002a1c <HAL_GPIO_Init+0x2bc>)
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	089b      	lsrs	r3, r3, #2
 80028fe:	3302      	adds	r3, #2
 8002900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002904:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	220f      	movs	r2, #15
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4013      	ands	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a40      	ldr	r2, [pc, #256]	; (8002a20 <HAL_GPIO_Init+0x2c0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d013      	beq.n	800294c <HAL_GPIO_Init+0x1ec>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a3f      	ldr	r2, [pc, #252]	; (8002a24 <HAL_GPIO_Init+0x2c4>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d00d      	beq.n	8002948 <HAL_GPIO_Init+0x1e8>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a3e      	ldr	r2, [pc, #248]	; (8002a28 <HAL_GPIO_Init+0x2c8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d007      	beq.n	8002944 <HAL_GPIO_Init+0x1e4>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a3d      	ldr	r2, [pc, #244]	; (8002a2c <HAL_GPIO_Init+0x2cc>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d101      	bne.n	8002940 <HAL_GPIO_Init+0x1e0>
 800293c:	2303      	movs	r3, #3
 800293e:	e006      	b.n	800294e <HAL_GPIO_Init+0x1ee>
 8002940:	2304      	movs	r3, #4
 8002942:	e004      	b.n	800294e <HAL_GPIO_Init+0x1ee>
 8002944:	2302      	movs	r3, #2
 8002946:	e002      	b.n	800294e <HAL_GPIO_Init+0x1ee>
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <HAL_GPIO_Init+0x1ee>
 800294c:	2300      	movs	r3, #0
 800294e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002950:	f002 0203 	and.w	r2, r2, #3
 8002954:	0092      	lsls	r2, r2, #2
 8002956:	4093      	lsls	r3, r2
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800295e:	492f      	ldr	r1, [pc, #188]	; (8002a1c <HAL_GPIO_Init+0x2bc>)
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	089b      	lsrs	r3, r3, #2
 8002964:	3302      	adds	r3, #2
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d006      	beq.n	8002986 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002978:	4b2d      	ldr	r3, [pc, #180]	; (8002a30 <HAL_GPIO_Init+0x2d0>)
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	492c      	ldr	r1, [pc, #176]	; (8002a30 <HAL_GPIO_Init+0x2d0>)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	608b      	str	r3, [r1, #8]
 8002984:	e006      	b.n	8002994 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002986:	4b2a      	ldr	r3, [pc, #168]	; (8002a30 <HAL_GPIO_Init+0x2d0>)
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	43db      	mvns	r3, r3
 800298e:	4928      	ldr	r1, [pc, #160]	; (8002a30 <HAL_GPIO_Init+0x2d0>)
 8002990:	4013      	ands	r3, r2
 8002992:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d006      	beq.n	80029ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029a0:	4b23      	ldr	r3, [pc, #140]	; (8002a30 <HAL_GPIO_Init+0x2d0>)
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	4922      	ldr	r1, [pc, #136]	; (8002a30 <HAL_GPIO_Init+0x2d0>)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60cb      	str	r3, [r1, #12]
 80029ac:	e006      	b.n	80029bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029ae:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <HAL_GPIO_Init+0x2d0>)
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	491e      	ldr	r1, [pc, #120]	; (8002a30 <HAL_GPIO_Init+0x2d0>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d006      	beq.n	80029d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029c8:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <HAL_GPIO_Init+0x2d0>)
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	4918      	ldr	r1, [pc, #96]	; (8002a30 <HAL_GPIO_Init+0x2d0>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]
 80029d4:	e006      	b.n	80029e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029d6:	4b16      	ldr	r3, [pc, #88]	; (8002a30 <HAL_GPIO_Init+0x2d0>)
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	43db      	mvns	r3, r3
 80029de:	4914      	ldr	r1, [pc, #80]	; (8002a30 <HAL_GPIO_Init+0x2d0>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d021      	beq.n	8002a34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029f0:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <HAL_GPIO_Init+0x2d0>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	490e      	ldr	r1, [pc, #56]	; (8002a30 <HAL_GPIO_Init+0x2d0>)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	600b      	str	r3, [r1, #0]
 80029fc:	e021      	b.n	8002a42 <HAL_GPIO_Init+0x2e2>
 80029fe:	bf00      	nop
 8002a00:	10320000 	.word	0x10320000
 8002a04:	10310000 	.word	0x10310000
 8002a08:	10220000 	.word	0x10220000
 8002a0c:	10210000 	.word	0x10210000
 8002a10:	10120000 	.word	0x10120000
 8002a14:	10110000 	.word	0x10110000
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40010000 	.word	0x40010000
 8002a20:	40010800 	.word	0x40010800
 8002a24:	40010c00 	.word	0x40010c00
 8002a28:	40011000 	.word	0x40011000
 8002a2c:	40011400 	.word	0x40011400
 8002a30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a34:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <HAL_GPIO_Init+0x304>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	4909      	ldr	r1, [pc, #36]	; (8002a64 <HAL_GPIO_Init+0x304>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	3301      	adds	r3, #1
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f47f ae8e 	bne.w	8002774 <HAL_GPIO_Init+0x14>
  }
}
 8002a58:	bf00      	nop
 8002a5a:	bf00      	nop
 8002a5c:	372c      	adds	r7, #44	; 0x2c
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	40010400 	.word	0x40010400

08002a68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e12b      	b.n	8002cd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff fa26 	bl	8001ee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2224      	movs	r2, #36	; 0x24
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002acc:	f000 fcda 	bl	8003484 <HAL_RCC_GetPCLK1Freq>
 8002ad0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	4a81      	ldr	r2, [pc, #516]	; (8002cdc <HAL_I2C_Init+0x274>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d807      	bhi.n	8002aec <HAL_I2C_Init+0x84>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4a80      	ldr	r2, [pc, #512]	; (8002ce0 <HAL_I2C_Init+0x278>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	bf94      	ite	ls
 8002ae4:	2301      	movls	r3, #1
 8002ae6:	2300      	movhi	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	e006      	b.n	8002afa <HAL_I2C_Init+0x92>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4a7d      	ldr	r2, [pc, #500]	; (8002ce4 <HAL_I2C_Init+0x27c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	bf94      	ite	ls
 8002af4:	2301      	movls	r3, #1
 8002af6:	2300      	movhi	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e0e7      	b.n	8002cd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4a78      	ldr	r2, [pc, #480]	; (8002ce8 <HAL_I2C_Init+0x280>)
 8002b06:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0a:	0c9b      	lsrs	r3, r3, #18
 8002b0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	4a6a      	ldr	r2, [pc, #424]	; (8002cdc <HAL_I2C_Init+0x274>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d802      	bhi.n	8002b3c <HAL_I2C_Init+0xd4>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	e009      	b.n	8002b50 <HAL_I2C_Init+0xe8>
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b42:	fb02 f303 	mul.w	r3, r2, r3
 8002b46:	4a69      	ldr	r2, [pc, #420]	; (8002cec <HAL_I2C_Init+0x284>)
 8002b48:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4c:	099b      	lsrs	r3, r3, #6
 8002b4e:	3301      	adds	r3, #1
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	430b      	orrs	r3, r1
 8002b56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	495c      	ldr	r1, [pc, #368]	; (8002cdc <HAL_I2C_Init+0x274>)
 8002b6c:	428b      	cmp	r3, r1
 8002b6e:	d819      	bhi.n	8002ba4 <HAL_I2C_Init+0x13c>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	1e59      	subs	r1, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b7e:	1c59      	adds	r1, r3, #1
 8002b80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b84:	400b      	ands	r3, r1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_I2C_Init+0x138>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1e59      	subs	r1, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b98:	3301      	adds	r3, #1
 8002b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9e:	e051      	b.n	8002c44 <HAL_I2C_Init+0x1dc>
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	e04f      	b.n	8002c44 <HAL_I2C_Init+0x1dc>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d111      	bne.n	8002bd0 <HAL_I2C_Init+0x168>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	1e58      	subs	r0, r3, #1
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6859      	ldr	r1, [r3, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	440b      	add	r3, r1
 8002bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	e012      	b.n	8002bf6 <HAL_I2C_Init+0x18e>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	1e58      	subs	r0, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6859      	ldr	r1, [r3, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	0099      	lsls	r1, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002be6:	3301      	adds	r3, #1
 8002be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bf0c      	ite	eq
 8002bf0:	2301      	moveq	r3, #1
 8002bf2:	2300      	movne	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_I2C_Init+0x196>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e022      	b.n	8002c44 <HAL_I2C_Init+0x1dc>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10e      	bne.n	8002c24 <HAL_I2C_Init+0x1bc>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1e58      	subs	r0, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6859      	ldr	r1, [r3, #4]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	440b      	add	r3, r1
 8002c14:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c22:	e00f      	b.n	8002c44 <HAL_I2C_Init+0x1dc>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1e58      	subs	r0, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6859      	ldr	r1, [r3, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	0099      	lsls	r1, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	6809      	ldr	r1, [r1, #0]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69da      	ldr	r2, [r3, #28]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6911      	ldr	r1, [r2, #16]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68d2      	ldr	r2, [r2, #12]
 8002c7e:	4311      	orrs	r1, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	430b      	orrs	r3, r1
 8002c86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	000186a0 	.word	0x000186a0
 8002ce0:	001e847f 	.word	0x001e847f
 8002ce4:	003d08ff 	.word	0x003d08ff
 8002ce8:	431bde83 	.word	0x431bde83
 8002cec:	10624dd3 	.word	0x10624dd3

08002cf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e272      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8087 	beq.w	8002e1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d10:	4b92      	ldr	r3, [pc, #584]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d00c      	beq.n	8002d36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d1c:	4b8f      	ldr	r3, [pc, #572]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 030c 	and.w	r3, r3, #12
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d112      	bne.n	8002d4e <HAL_RCC_OscConfig+0x5e>
 8002d28:	4b8c      	ldr	r3, [pc, #560]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d34:	d10b      	bne.n	8002d4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d36:	4b89      	ldr	r3, [pc, #548]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d06c      	beq.n	8002e1c <HAL_RCC_OscConfig+0x12c>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d168      	bne.n	8002e1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e24c      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d56:	d106      	bne.n	8002d66 <HAL_RCC_OscConfig+0x76>
 8002d58:	4b80      	ldr	r3, [pc, #512]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a7f      	ldr	r2, [pc, #508]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	e02e      	b.n	8002dc4 <HAL_RCC_OscConfig+0xd4>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x98>
 8002d6e:	4b7b      	ldr	r3, [pc, #492]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a7a      	ldr	r2, [pc, #488]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	4b78      	ldr	r3, [pc, #480]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a77      	ldr	r2, [pc, #476]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	e01d      	b.n	8002dc4 <HAL_RCC_OscConfig+0xd4>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d90:	d10c      	bne.n	8002dac <HAL_RCC_OscConfig+0xbc>
 8002d92:	4b72      	ldr	r3, [pc, #456]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a71      	ldr	r2, [pc, #452]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	4b6f      	ldr	r3, [pc, #444]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a6e      	ldr	r2, [pc, #440]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	e00b      	b.n	8002dc4 <HAL_RCC_OscConfig+0xd4>
 8002dac:	4b6b      	ldr	r3, [pc, #428]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a6a      	ldr	r2, [pc, #424]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	4b68      	ldr	r3, [pc, #416]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a67      	ldr	r2, [pc, #412]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d013      	beq.n	8002df4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7ff fada 	bl	8002384 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd4:	f7ff fad6 	bl	8002384 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b64      	cmp	r3, #100	; 0x64
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e200      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de6:	4b5d      	ldr	r3, [pc, #372]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0xe4>
 8002df2:	e014      	b.n	8002e1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7ff fac6 	bl	8002384 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dfc:	f7ff fac2 	bl	8002384 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b64      	cmp	r3, #100	; 0x64
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e1ec      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0e:	4b53      	ldr	r3, [pc, #332]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x10c>
 8002e1a:	e000      	b.n	8002e1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d063      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e2a:	4b4c      	ldr	r3, [pc, #304]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00b      	beq.n	8002e4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e36:	4b49      	ldr	r3, [pc, #292]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d11c      	bne.n	8002e7c <HAL_RCC_OscConfig+0x18c>
 8002e42:	4b46      	ldr	r3, [pc, #280]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d116      	bne.n	8002e7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4e:	4b43      	ldr	r3, [pc, #268]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_RCC_OscConfig+0x176>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d001      	beq.n	8002e66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e1c0      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e66:	4b3d      	ldr	r3, [pc, #244]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4939      	ldr	r1, [pc, #228]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7a:	e03a      	b.n	8002ef2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d020      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e84:	4b36      	ldr	r3, [pc, #216]	; (8002f60 <HAL_RCC_OscConfig+0x270>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8a:	f7ff fa7b 	bl	8002384 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e92:	f7ff fa77 	bl	8002384 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e1a1      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea4:	4b2d      	ldr	r3, [pc, #180]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb0:	4b2a      	ldr	r3, [pc, #168]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4927      	ldr	r1, [pc, #156]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]
 8002ec4:	e015      	b.n	8002ef2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec6:	4b26      	ldr	r3, [pc, #152]	; (8002f60 <HAL_RCC_OscConfig+0x270>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7ff fa5a 	bl	8002384 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed4:	f7ff fa56 	bl	8002384 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e180      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee6:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d03a      	beq.n	8002f74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d019      	beq.n	8002f3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f06:	4b17      	ldr	r3, [pc, #92]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0c:	f7ff fa3a 	bl	8002384 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f14:	f7ff fa36 	bl	8002384 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e160      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f26:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <HAL_RCC_OscConfig+0x26c>)
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f32:	2001      	movs	r0, #1
 8002f34:	f000 face 	bl	80034d4 <RCC_Delay>
 8002f38:	e01c      	b.n	8002f74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f40:	f7ff fa20 	bl	8002384 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f46:	e00f      	b.n	8002f68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f48:	f7ff fa1c 	bl	8002384 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d908      	bls.n	8002f68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e146      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
 8002f5a:	bf00      	nop
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	42420000 	.word	0x42420000
 8002f64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f68:	4b92      	ldr	r3, [pc, #584]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1e9      	bne.n	8002f48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 80a6 	beq.w	80030ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f82:	2300      	movs	r3, #0
 8002f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f86:	4b8b      	ldr	r3, [pc, #556]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10d      	bne.n	8002fae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f92:	4b88      	ldr	r3, [pc, #544]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	4a87      	ldr	r2, [pc, #540]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8002f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	61d3      	str	r3, [r2, #28]
 8002f9e:	4b85      	ldr	r3, [pc, #532]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	60bb      	str	r3, [r7, #8]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002faa:	2301      	movs	r3, #1
 8002fac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fae:	4b82      	ldr	r3, [pc, #520]	; (80031b8 <HAL_RCC_OscConfig+0x4c8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d118      	bne.n	8002fec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fba:	4b7f      	ldr	r3, [pc, #508]	; (80031b8 <HAL_RCC_OscConfig+0x4c8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a7e      	ldr	r2, [pc, #504]	; (80031b8 <HAL_RCC_OscConfig+0x4c8>)
 8002fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc6:	f7ff f9dd 	bl	8002384 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fce:	f7ff f9d9 	bl	8002384 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b64      	cmp	r3, #100	; 0x64
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e103      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe0:	4b75      	ldr	r3, [pc, #468]	; (80031b8 <HAL_RCC_OscConfig+0x4c8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d106      	bne.n	8003002 <HAL_RCC_OscConfig+0x312>
 8002ff4:	4b6f      	ldr	r3, [pc, #444]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	4a6e      	ldr	r2, [pc, #440]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	6213      	str	r3, [r2, #32]
 8003000:	e02d      	b.n	800305e <HAL_RCC_OscConfig+0x36e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10c      	bne.n	8003024 <HAL_RCC_OscConfig+0x334>
 800300a:	4b6a      	ldr	r3, [pc, #424]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	4a69      	ldr	r2, [pc, #420]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8003010:	f023 0301 	bic.w	r3, r3, #1
 8003014:	6213      	str	r3, [r2, #32]
 8003016:	4b67      	ldr	r3, [pc, #412]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	4a66      	ldr	r2, [pc, #408]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 800301c:	f023 0304 	bic.w	r3, r3, #4
 8003020:	6213      	str	r3, [r2, #32]
 8003022:	e01c      	b.n	800305e <HAL_RCC_OscConfig+0x36e>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	2b05      	cmp	r3, #5
 800302a:	d10c      	bne.n	8003046 <HAL_RCC_OscConfig+0x356>
 800302c:	4b61      	ldr	r3, [pc, #388]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	4a60      	ldr	r2, [pc, #384]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8003032:	f043 0304 	orr.w	r3, r3, #4
 8003036:	6213      	str	r3, [r2, #32]
 8003038:	4b5e      	ldr	r3, [pc, #376]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	4a5d      	ldr	r2, [pc, #372]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	6213      	str	r3, [r2, #32]
 8003044:	e00b      	b.n	800305e <HAL_RCC_OscConfig+0x36e>
 8003046:	4b5b      	ldr	r3, [pc, #364]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	4a5a      	ldr	r2, [pc, #360]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 800304c:	f023 0301 	bic.w	r3, r3, #1
 8003050:	6213      	str	r3, [r2, #32]
 8003052:	4b58      	ldr	r3, [pc, #352]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	4a57      	ldr	r2, [pc, #348]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8003058:	f023 0304 	bic.w	r3, r3, #4
 800305c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d015      	beq.n	8003092 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003066:	f7ff f98d 	bl	8002384 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306c:	e00a      	b.n	8003084 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306e:	f7ff f989 	bl	8002384 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	f241 3288 	movw	r2, #5000	; 0x1388
 800307c:	4293      	cmp	r3, r2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e0b1      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003084:	4b4b      	ldr	r3, [pc, #300]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0ee      	beq.n	800306e <HAL_RCC_OscConfig+0x37e>
 8003090:	e014      	b.n	80030bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003092:	f7ff f977 	bl	8002384 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003098:	e00a      	b.n	80030b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309a:	f7ff f973 	bl	8002384 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e09b      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b0:	4b40      	ldr	r3, [pc, #256]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1ee      	bne.n	800309a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030bc:	7dfb      	ldrb	r3, [r7, #23]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d105      	bne.n	80030ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c2:	4b3c      	ldr	r3, [pc, #240]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	4a3b      	ldr	r2, [pc, #236]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 80030c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 8087 	beq.w	80031e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d8:	4b36      	ldr	r3, [pc, #216]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 030c 	and.w	r3, r3, #12
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d061      	beq.n	80031a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d146      	bne.n	800317a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ec:	4b33      	ldr	r3, [pc, #204]	; (80031bc <HAL_RCC_OscConfig+0x4cc>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f2:	f7ff f947 	bl	8002384 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fa:	f7ff f943 	bl	8002384 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e06d      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800310c:	4b29      	ldr	r3, [pc, #164]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f0      	bne.n	80030fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003120:	d108      	bne.n	8003134 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003122:	4b24      	ldr	r3, [pc, #144]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	4921      	ldr	r1, [pc, #132]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8003130:	4313      	orrs	r3, r2
 8003132:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003134:	4b1f      	ldr	r3, [pc, #124]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a19      	ldr	r1, [r3, #32]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	430b      	orrs	r3, r1
 8003146:	491b      	ldr	r1, [pc, #108]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 8003148:	4313      	orrs	r3, r2
 800314a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800314c:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <HAL_RCC_OscConfig+0x4cc>)
 800314e:	2201      	movs	r2, #1
 8003150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003152:	f7ff f917 	bl	8002384 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800315a:	f7ff f913 	bl	8002384 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e03d      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f0      	beq.n	800315a <HAL_RCC_OscConfig+0x46a>
 8003178:	e035      	b.n	80031e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317a:	4b10      	ldr	r3, [pc, #64]	; (80031bc <HAL_RCC_OscConfig+0x4cc>)
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003180:	f7ff f900 	bl	8002384 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003188:	f7ff f8fc 	bl	8002384 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e026      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800319a:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <HAL_RCC_OscConfig+0x4c4>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x498>
 80031a6:	e01e      	b.n	80031e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d107      	bne.n	80031c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e019      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40007000 	.word	0x40007000
 80031bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <HAL_RCC_OscConfig+0x500>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d106      	bne.n	80031e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031de:	429a      	cmp	r2, r3
 80031e0:	d001      	beq.n	80031e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40021000 	.word	0x40021000

080031f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0d0      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003208:	4b6a      	ldr	r3, [pc, #424]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d910      	bls.n	8003238 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003216:	4b67      	ldr	r3, [pc, #412]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 0207 	bic.w	r2, r3, #7
 800321e:	4965      	ldr	r1, [pc, #404]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	4313      	orrs	r3, r2
 8003224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003226:	4b63      	ldr	r3, [pc, #396]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0b8      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d020      	beq.n	8003286 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d005      	beq.n	800325c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003250:	4b59      	ldr	r3, [pc, #356]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	4a58      	ldr	r2, [pc, #352]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003256:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800325a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003268:	4b53      	ldr	r3, [pc, #332]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4a52      	ldr	r2, [pc, #328]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800326e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003272:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003274:	4b50      	ldr	r3, [pc, #320]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	494d      	ldr	r1, [pc, #308]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003282:	4313      	orrs	r3, r2
 8003284:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d040      	beq.n	8003314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d107      	bne.n	80032aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329a:	4b47      	ldr	r3, [pc, #284]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d115      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e07f      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d107      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b2:	4b41      	ldr	r3, [pc, #260]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d109      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e073      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c2:	4b3d      	ldr	r3, [pc, #244]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e06b      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032d2:	4b39      	ldr	r3, [pc, #228]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f023 0203 	bic.w	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	4936      	ldr	r1, [pc, #216]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e4:	f7ff f84e 	bl	8002384 <HAL_GetTick>
 80032e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ea:	e00a      	b.n	8003302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ec:	f7ff f84a 	bl	8002384 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e053      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003302:	4b2d      	ldr	r3, [pc, #180]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 020c 	and.w	r2, r3, #12
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	429a      	cmp	r2, r3
 8003312:	d1eb      	bne.n	80032ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003314:	4b27      	ldr	r3, [pc, #156]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d210      	bcs.n	8003344 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003322:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 0207 	bic.w	r2, r3, #7
 800332a:	4922      	ldr	r1, [pc, #136]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	4313      	orrs	r3, r2
 8003330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003332:	4b20      	ldr	r3, [pc, #128]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d001      	beq.n	8003344 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e032      	b.n	80033aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003350:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4916      	ldr	r1, [pc, #88]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800335e:	4313      	orrs	r3, r2
 8003360:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d009      	beq.n	8003382 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800336e:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	490e      	ldr	r1, [pc, #56]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800337e:	4313      	orrs	r3, r2
 8003380:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003382:	f000 f821 	bl	80033c8 <HAL_RCC_GetSysClockFreq>
 8003386:	4602      	mov	r2, r0
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	091b      	lsrs	r3, r3, #4
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	490a      	ldr	r1, [pc, #40]	; (80033bc <HAL_RCC_ClockConfig+0x1c8>)
 8003394:	5ccb      	ldrb	r3, [r1, r3]
 8003396:	fa22 f303 	lsr.w	r3, r2, r3
 800339a:	4a09      	ldr	r2, [pc, #36]	; (80033c0 <HAL_RCC_ClockConfig+0x1cc>)
 800339c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800339e:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <HAL_RCC_ClockConfig+0x1d0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe ffac 	bl	8002300 <HAL_InitTick>

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40022000 	.word	0x40022000
 80033b8:	40021000 	.word	0x40021000
 80033bc:	080056f4 	.word	0x080056f4
 80033c0:	20000060 	.word	0x20000060
 80033c4:	20000064 	.word	0x20000064

080033c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	2300      	movs	r3, #0
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	2300      	movs	r3, #0
 80033dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033e2:	4b1e      	ldr	r3, [pc, #120]	; (800345c <HAL_RCC_GetSysClockFreq+0x94>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d002      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x30>
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d003      	beq.n	80033fe <HAL_RCC_GetSysClockFreq+0x36>
 80033f6:	e027      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033f8:	4b19      	ldr	r3, [pc, #100]	; (8003460 <HAL_RCC_GetSysClockFreq+0x98>)
 80033fa:	613b      	str	r3, [r7, #16]
      break;
 80033fc:	e027      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	0c9b      	lsrs	r3, r3, #18
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	4a17      	ldr	r2, [pc, #92]	; (8003464 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003408:	5cd3      	ldrb	r3, [r2, r3]
 800340a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d010      	beq.n	8003438 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003416:	4b11      	ldr	r3, [pc, #68]	; (800345c <HAL_RCC_GetSysClockFreq+0x94>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	0c5b      	lsrs	r3, r3, #17
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	4a11      	ldr	r2, [pc, #68]	; (8003468 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003422:	5cd3      	ldrb	r3, [r2, r3]
 8003424:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a0d      	ldr	r2, [pc, #52]	; (8003460 <HAL_RCC_GetSysClockFreq+0x98>)
 800342a:	fb03 f202 	mul.w	r2, r3, r2
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	fbb2 f3f3 	udiv	r3, r2, r3
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	e004      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a0c      	ldr	r2, [pc, #48]	; (800346c <HAL_RCC_GetSysClockFreq+0xa4>)
 800343c:	fb02 f303 	mul.w	r3, r2, r3
 8003440:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	613b      	str	r3, [r7, #16]
      break;
 8003446:	e002      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <HAL_RCC_GetSysClockFreq+0x98>)
 800344a:	613b      	str	r3, [r7, #16]
      break;
 800344c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800344e:	693b      	ldr	r3, [r7, #16]
}
 8003450:	4618      	mov	r0, r3
 8003452:	371c      	adds	r7, #28
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40021000 	.word	0x40021000
 8003460:	007a1200 	.word	0x007a1200
 8003464:	0800570c 	.word	0x0800570c
 8003468:	0800571c 	.word	0x0800571c
 800346c:	003d0900 	.word	0x003d0900

08003470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003474:	4b02      	ldr	r3, [pc, #8]	; (8003480 <HAL_RCC_GetHCLKFreq+0x10>)
 8003476:	681b      	ldr	r3, [r3, #0]
}
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr
 8003480:	20000060 	.word	0x20000060

08003484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003488:	f7ff fff2 	bl	8003470 <HAL_RCC_GetHCLKFreq>
 800348c:	4602      	mov	r2, r0
 800348e:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	0a1b      	lsrs	r3, r3, #8
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	4903      	ldr	r1, [pc, #12]	; (80034a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800349a:	5ccb      	ldrb	r3, [r1, r3]
 800349c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40021000 	.word	0x40021000
 80034a8:	08005704 	.word	0x08005704

080034ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034b0:	f7ff ffde 	bl	8003470 <HAL_RCC_GetHCLKFreq>
 80034b4:	4602      	mov	r2, r0
 80034b6:	4b05      	ldr	r3, [pc, #20]	; (80034cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	0adb      	lsrs	r3, r3, #11
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	4903      	ldr	r1, [pc, #12]	; (80034d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034c2:	5ccb      	ldrb	r3, [r1, r3]
 80034c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40021000 	.word	0x40021000
 80034d0:	08005704 	.word	0x08005704

080034d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034dc:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <RCC_Delay+0x34>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a0a      	ldr	r2, [pc, #40]	; (800350c <RCC_Delay+0x38>)
 80034e2:	fba2 2303 	umull	r2, r3, r2, r3
 80034e6:	0a5b      	lsrs	r3, r3, #9
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	fb02 f303 	mul.w	r3, r2, r3
 80034ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034f0:	bf00      	nop
  }
  while (Delay --);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	1e5a      	subs	r2, r3, #1
 80034f6:	60fa      	str	r2, [r7, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1f9      	bne.n	80034f0 <RCC_Delay+0x1c>
}
 80034fc:	bf00      	nop
 80034fe:	bf00      	nop
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr
 8003508:	20000060 	.word	0x20000060
 800350c:	10624dd3 	.word	0x10624dd3

08003510 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e041      	b.n	80035a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d106      	bne.n	800353c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7fe fd12 	bl	8001f60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3304      	adds	r3, #4
 800354c:	4619      	mov	r1, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f000 fac2 	bl	8003ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d109      	bne.n	80035d4 <HAL_TIM_PWM_Start+0x24>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	bf14      	ite	ne
 80035cc:	2301      	movne	r3, #1
 80035ce:	2300      	moveq	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	e022      	b.n	800361a <HAL_TIM_PWM_Start+0x6a>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d109      	bne.n	80035ee <HAL_TIM_PWM_Start+0x3e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	bf14      	ite	ne
 80035e6:	2301      	movne	r3, #1
 80035e8:	2300      	moveq	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	e015      	b.n	800361a <HAL_TIM_PWM_Start+0x6a>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d109      	bne.n	8003608 <HAL_TIM_PWM_Start+0x58>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	bf14      	ite	ne
 8003600:	2301      	movne	r3, #1
 8003602:	2300      	moveq	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	e008      	b.n	800361a <HAL_TIM_PWM_Start+0x6a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	bf14      	ite	ne
 8003614:	2301      	movne	r3, #1
 8003616:	2300      	moveq	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e05e      	b.n	80036e0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d104      	bne.n	8003632 <HAL_TIM_PWM_Start+0x82>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003630:	e013      	b.n	800365a <HAL_TIM_PWM_Start+0xaa>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b04      	cmp	r3, #4
 8003636:	d104      	bne.n	8003642 <HAL_TIM_PWM_Start+0x92>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003640:	e00b      	b.n	800365a <HAL_TIM_PWM_Start+0xaa>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b08      	cmp	r3, #8
 8003646:	d104      	bne.n	8003652 <HAL_TIM_PWM_Start+0xa2>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003650:	e003      	b.n	800365a <HAL_TIM_PWM_Start+0xaa>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2202      	movs	r2, #2
 8003656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2201      	movs	r2, #1
 8003660:	6839      	ldr	r1, [r7, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fc2e 	bl	8003ec4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a1e      	ldr	r2, [pc, #120]	; (80036e8 <HAL_TIM_PWM_Start+0x138>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d107      	bne.n	8003682 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003680:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a18      	ldr	r2, [pc, #96]	; (80036e8 <HAL_TIM_PWM_Start+0x138>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d00e      	beq.n	80036aa <HAL_TIM_PWM_Start+0xfa>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003694:	d009      	beq.n	80036aa <HAL_TIM_PWM_Start+0xfa>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a14      	ldr	r2, [pc, #80]	; (80036ec <HAL_TIM_PWM_Start+0x13c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d004      	beq.n	80036aa <HAL_TIM_PWM_Start+0xfa>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a12      	ldr	r2, [pc, #72]	; (80036f0 <HAL_TIM_PWM_Start+0x140>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d111      	bne.n	80036ce <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2b06      	cmp	r3, #6
 80036ba:	d010      	beq.n	80036de <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036cc:	e007      	b.n	80036de <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f042 0201 	orr.w	r2, r2, #1
 80036dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40012c00 	.word	0x40012c00
 80036ec:	40000400 	.word	0x40000400
 80036f0:	40000800 	.word	0x40000800

080036f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e093      	b.n	8003830 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d106      	bne.n	8003722 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7fe fc3b 	bl	8001f98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2202      	movs	r2, #2
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003738:	f023 0307 	bic.w	r3, r3, #7
 800373c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3304      	adds	r3, #4
 8003746:	4619      	mov	r1, r3
 8003748:	4610      	mov	r0, r2
 800374a:	f000 f9c5 	bl	8003ad8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003776:	f023 0303 	bic.w	r3, r3, #3
 800377a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	4313      	orrs	r3, r2
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003794:	f023 030c 	bic.w	r3, r3, #12
 8003798:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	021b      	lsls	r3, r3, #8
 80037b0:	4313      	orrs	r3, r2
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	011a      	lsls	r2, r3, #4
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	031b      	lsls	r3, r3, #12
 80037c4:	4313      	orrs	r3, r2
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80037d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	4313      	orrs	r3, r2
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003848:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003850:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003858:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003860:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d110      	bne.n	800388a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d102      	bne.n	8003874 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800386e:	7b7b      	ldrb	r3, [r7, #13]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d001      	beq.n	8003878 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e069      	b.n	800394c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003888:	e031      	b.n	80038ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b04      	cmp	r3, #4
 800388e:	d110      	bne.n	80038b2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003890:	7bbb      	ldrb	r3, [r7, #14]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d102      	bne.n	800389c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003896:	7b3b      	ldrb	r3, [r7, #12]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d001      	beq.n	80038a0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e055      	b.n	800394c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038b0:	e01d      	b.n	80038ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d108      	bne.n	80038ca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038b8:	7bbb      	ldrb	r3, [r7, #14]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d105      	bne.n	80038ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038be:	7b7b      	ldrb	r3, [r7, #13]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d102      	bne.n	80038ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038c4:	7b3b      	ldrb	r3, [r7, #12]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d001      	beq.n	80038ce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e03e      	b.n	800394c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2202      	movs	r2, #2
 80038d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2202      	movs	r2, #2
 80038da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2202      	movs	r2, #2
 80038e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2202      	movs	r2, #2
 80038ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_TIM_Encoder_Start+0xc4>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d008      	beq.n	800390c <HAL_TIM_Encoder_Start+0xd4>
 80038fa:	e00f      	b.n	800391c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2201      	movs	r2, #1
 8003902:	2100      	movs	r1, #0
 8003904:	4618      	mov	r0, r3
 8003906:	f000 fadd 	bl	8003ec4 <TIM_CCxChannelCmd>
      break;
 800390a:	e016      	b.n	800393a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2201      	movs	r2, #1
 8003912:	2104      	movs	r1, #4
 8003914:	4618      	mov	r0, r3
 8003916:	f000 fad5 	bl	8003ec4 <TIM_CCxChannelCmd>
      break;
 800391a:	e00e      	b.n	800393a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2201      	movs	r2, #1
 8003922:	2100      	movs	r1, #0
 8003924:	4618      	mov	r0, r3
 8003926:	f000 facd 	bl	8003ec4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2201      	movs	r2, #1
 8003930:	2104      	movs	r1, #4
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fac6 	bl	8003ec4 <TIM_CCxChannelCmd>
      break;
 8003938:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 0201 	orr.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800396a:	2b01      	cmp	r3, #1
 800396c:	d101      	bne.n	8003972 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800396e:	2302      	movs	r3, #2
 8003970:	e0ae      	b.n	8003ad0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b0c      	cmp	r3, #12
 800397e:	f200 809f 	bhi.w	8003ac0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003982:	a201      	add	r2, pc, #4	; (adr r2, 8003988 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003988:	080039bd 	.word	0x080039bd
 800398c:	08003ac1 	.word	0x08003ac1
 8003990:	08003ac1 	.word	0x08003ac1
 8003994:	08003ac1 	.word	0x08003ac1
 8003998:	080039fd 	.word	0x080039fd
 800399c:	08003ac1 	.word	0x08003ac1
 80039a0:	08003ac1 	.word	0x08003ac1
 80039a4:	08003ac1 	.word	0x08003ac1
 80039a8:	08003a3f 	.word	0x08003a3f
 80039ac:	08003ac1 	.word	0x08003ac1
 80039b0:	08003ac1 	.word	0x08003ac1
 80039b4:	08003ac1 	.word	0x08003ac1
 80039b8:	08003a7f 	.word	0x08003a7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 f8f6 	bl	8003bb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0208 	orr.w	r2, r2, #8
 80039d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699a      	ldr	r2, [r3, #24]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0204 	bic.w	r2, r2, #4
 80039e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6999      	ldr	r1, [r3, #24]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	619a      	str	r2, [r3, #24]
      break;
 80039fa:	e064      	b.n	8003ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68b9      	ldr	r1, [r7, #8]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 f93c 	bl	8003c80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699a      	ldr	r2, [r3, #24]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6999      	ldr	r1, [r3, #24]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	021a      	lsls	r2, r3, #8
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	619a      	str	r2, [r3, #24]
      break;
 8003a3c:	e043      	b.n	8003ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 f985 	bl	8003d54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 0208 	orr.w	r2, r2, #8
 8003a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69da      	ldr	r2, [r3, #28]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0204 	bic.w	r2, r2, #4
 8003a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69d9      	ldr	r1, [r3, #28]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	61da      	str	r2, [r3, #28]
      break;
 8003a7c:	e023      	b.n	8003ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 f9cf 	bl	8003e28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	69da      	ldr	r2, [r3, #28]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69da      	ldr	r2, [r3, #28]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	69d9      	ldr	r1, [r3, #28]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	021a      	lsls	r2, r3, #8
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	61da      	str	r2, [r3, #28]
      break;
 8003abe:	e002      	b.n	8003ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ac4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a2f      	ldr	r2, [pc, #188]	; (8003ba8 <TIM_Base_SetConfig+0xd0>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d00b      	beq.n	8003b08 <TIM_Base_SetConfig+0x30>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af6:	d007      	beq.n	8003b08 <TIM_Base_SetConfig+0x30>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a2c      	ldr	r2, [pc, #176]	; (8003bac <TIM_Base_SetConfig+0xd4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d003      	beq.n	8003b08 <TIM_Base_SetConfig+0x30>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a2b      	ldr	r2, [pc, #172]	; (8003bb0 <TIM_Base_SetConfig+0xd8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d108      	bne.n	8003b1a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a22      	ldr	r2, [pc, #136]	; (8003ba8 <TIM_Base_SetConfig+0xd0>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00b      	beq.n	8003b3a <TIM_Base_SetConfig+0x62>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b28:	d007      	beq.n	8003b3a <TIM_Base_SetConfig+0x62>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a1f      	ldr	r2, [pc, #124]	; (8003bac <TIM_Base_SetConfig+0xd4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d003      	beq.n	8003b3a <TIM_Base_SetConfig+0x62>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a1e      	ldr	r2, [pc, #120]	; (8003bb0 <TIM_Base_SetConfig+0xd8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d108      	bne.n	8003b4c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a0d      	ldr	r2, [pc, #52]	; (8003ba8 <TIM_Base_SetConfig+0xd0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d103      	bne.n	8003b80 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d005      	beq.n	8003b9e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f023 0201 	bic.w	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	611a      	str	r2, [r3, #16]
  }
}
 8003b9e:	bf00      	nop
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr
 8003ba8:	40012c00 	.word	0x40012c00
 8003bac:	40000400 	.word	0x40000400
 8003bb0:	40000800 	.word	0x40000800

08003bb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	f023 0201 	bic.w	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0303 	bic.w	r3, r3, #3
 8003bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f023 0302 	bic.w	r3, r3, #2
 8003bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a1c      	ldr	r2, [pc, #112]	; (8003c7c <TIM_OC1_SetConfig+0xc8>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d10c      	bne.n	8003c2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f023 0308 	bic.w	r3, r3, #8
 8003c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f023 0304 	bic.w	r3, r3, #4
 8003c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a13      	ldr	r2, [pc, #76]	; (8003c7c <TIM_OC1_SetConfig+0xc8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d111      	bne.n	8003c56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	621a      	str	r2, [r3, #32]
}
 8003c70:	bf00      	nop
 8003c72:	371c      	adds	r7, #28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40012c00 	.word	0x40012c00

08003c80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	f023 0210 	bic.w	r2, r3, #16
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f023 0320 	bic.w	r3, r3, #32
 8003cca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a1d      	ldr	r2, [pc, #116]	; (8003d50 <TIM_OC2_SetConfig+0xd0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d10d      	bne.n	8003cfc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a14      	ldr	r2, [pc, #80]	; (8003d50 <TIM_OC2_SetConfig+0xd0>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d113      	bne.n	8003d2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	621a      	str	r2, [r3, #32]
}
 8003d46:	bf00      	nop
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr
 8003d50:	40012c00 	.word	0x40012c00

08003d54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0303 	bic.w	r3, r3, #3
 8003d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	021b      	lsls	r3, r3, #8
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1d      	ldr	r2, [pc, #116]	; (8003e24 <TIM_OC3_SetConfig+0xd0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d10d      	bne.n	8003dce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003db8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a14      	ldr	r2, [pc, #80]	; (8003e24 <TIM_OC3_SetConfig+0xd0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d113      	bne.n	8003dfe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	621a      	str	r2, [r3, #32]
}
 8003e18:	bf00      	nop
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40012c00 	.word	0x40012c00

08003e28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	031b      	lsls	r3, r3, #12
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a0f      	ldr	r2, [pc, #60]	; (8003ec0 <TIM_OC4_SetConfig+0x98>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d109      	bne.n	8003e9c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	019b      	lsls	r3, r3, #6
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	621a      	str	r2, [r3, #32]
}
 8003eb6:	bf00      	nop
 8003eb8:	371c      	adds	r7, #28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr
 8003ec0:	40012c00 	.word	0x40012c00

08003ec4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a1a      	ldr	r2, [r3, #32]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	401a      	ands	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a1a      	ldr	r2, [r3, #32]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f003 031f 	and.w	r3, r3, #31
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8003efc:	431a      	orrs	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	621a      	str	r2, [r3, #32]
}
 8003f02:	bf00      	nop
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr

08003f0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e046      	b.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a16      	ldr	r2, [pc, #88]	; (8003fbc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d00e      	beq.n	8003f86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f70:	d009      	beq.n	8003f86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a12      	ldr	r2, [pc, #72]	; (8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d004      	beq.n	8003f86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a10      	ldr	r2, [pc, #64]	; (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d10c      	bne.n	8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr
 8003fbc:	40012c00 	.word	0x40012c00
 8003fc0:	40000400 	.word	0x40000400
 8003fc4:	40000800 	.word	0x40000800

08003fc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e042      	b.n	8004060 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fe f86e 	bl	80020d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2224      	movs	r2, #36	; 0x24
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800400a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 fd63 	bl	8004ad8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004020:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695a      	ldr	r2, [r3, #20]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004030:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004040:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08a      	sub	sp, #40	; 0x28
 800406c:	af02      	add	r7, sp, #8
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	4613      	mov	r3, r2
 8004076:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b20      	cmp	r3, #32
 8004086:	d175      	bne.n	8004174 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <HAL_UART_Transmit+0x2c>
 800408e:	88fb      	ldrh	r3, [r7, #6]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e06e      	b.n	8004176 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2221      	movs	r2, #33	; 0x21
 80040a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040a6:	f7fe f96d 	bl	8002384 <HAL_GetTick>
 80040aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	88fa      	ldrh	r2, [r7, #6]
 80040b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	88fa      	ldrh	r2, [r7, #6]
 80040b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c0:	d108      	bne.n	80040d4 <HAL_UART_Transmit+0x6c>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d104      	bne.n	80040d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	e003      	b.n	80040dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040d8:	2300      	movs	r3, #0
 80040da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040dc:	e02e      	b.n	800413c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2200      	movs	r2, #0
 80040e6:	2180      	movs	r1, #128	; 0x80
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 fb01 	bl	80046f0 <UART_WaitOnFlagUntilTimeout>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e03a      	b.n	8004176 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10b      	bne.n	800411e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004114:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	3302      	adds	r3, #2
 800411a:	61bb      	str	r3, [r7, #24]
 800411c:	e007      	b.n	800412e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	781a      	ldrb	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	3301      	adds	r3, #1
 800412c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1cb      	bne.n	80040de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2200      	movs	r2, #0
 800414e:	2140      	movs	r1, #64	; 0x40
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 facd 	bl	80046f0 <UART_WaitOnFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e006      	b.n	8004176 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	e000      	b.n	8004176 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004174:	2302      	movs	r3, #2
  }
}
 8004176:	4618      	mov	r0, r3
 8004178:	3720      	adds	r7, #32
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b0ba      	sub	sp, #232	; 0xe8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80041be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10f      	bne.n	80041e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d009      	beq.n	80041e6 <HAL_UART_IRQHandler+0x66>
 80041d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fbbc 	bl	800495c <UART_Receive_IT>
      return;
 80041e4:	e25b      	b.n	800469e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 80de 	beq.w	80043ac <HAL_UART_IRQHandler+0x22c>
 80041f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d106      	bne.n	800420a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004200:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 80d1 	beq.w	80043ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800420a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00b      	beq.n	800422e <HAL_UART_IRQHandler+0xae>
 8004216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800421a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	f043 0201 	orr.w	r2, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800422e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00b      	beq.n	8004252 <HAL_UART_IRQHandler+0xd2>
 800423a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d005      	beq.n	8004252 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424a:	f043 0202 	orr.w	r2, r3, #2
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <HAL_UART_IRQHandler+0xf6>
 800425e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d005      	beq.n	8004276 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426e:	f043 0204 	orr.w	r2, r3, #4
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	2b00      	cmp	r3, #0
 8004280:	d011      	beq.n	80042a6 <HAL_UART_IRQHandler+0x126>
 8004282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	d105      	bne.n	800429a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800428e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429e:	f043 0208 	orr.w	r2, r3, #8
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 81f2 	beq.w	8004694 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d008      	beq.n	80042ce <HAL_UART_IRQHandler+0x14e>
 80042bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 fb47 	bl	800495c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d8:	2b00      	cmp	r3, #0
 80042da:	bf14      	ite	ne
 80042dc:	2301      	movne	r3, #1
 80042de:	2300      	moveq	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d103      	bne.n	80042fa <HAL_UART_IRQHandler+0x17a>
 80042f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d04f      	beq.n	800439a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fa51 	bl	80047a2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d041      	beq.n	8004392 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3314      	adds	r3, #20
 8004314:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800431c:	e853 3f00 	ldrex	r3, [r3]
 8004320:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004324:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800432c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3314      	adds	r3, #20
 8004336:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800433a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800433e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004342:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004346:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800434a:	e841 2300 	strex	r3, r2, [r1]
 800434e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004352:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1d9      	bne.n	800430e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435e:	2b00      	cmp	r3, #0
 8004360:	d013      	beq.n	800438a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004366:	4a7e      	ldr	r2, [pc, #504]	; (8004560 <HAL_UART_IRQHandler+0x3e0>)
 8004368:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436e:	4618      	mov	r0, r3
 8004370:	f7fe f97e 	bl	8002670 <HAL_DMA_Abort_IT>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d016      	beq.n	80043a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004384:	4610      	mov	r0, r2
 8004386:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004388:	e00e      	b.n	80043a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f99c 	bl	80046c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004390:	e00a      	b.n	80043a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f998 	bl	80046c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004398:	e006      	b.n	80043a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f994 	bl	80046c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80043a6:	e175      	b.n	8004694 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a8:	bf00      	nop
    return;
 80043aa:	e173      	b.n	8004694 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	f040 814f 	bne.w	8004654 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ba:	f003 0310 	and.w	r3, r3, #16
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 8148 	beq.w	8004654 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80043c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8141 	beq.w	8004654 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043d2:	2300      	movs	r3, #0
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	60bb      	str	r3, [r7, #8]
 80043e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 80b6 	beq.w	8004564 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004404:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8145 	beq.w	8004698 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004416:	429a      	cmp	r2, r3
 8004418:	f080 813e 	bcs.w	8004698 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004422:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	2b20      	cmp	r3, #32
 800442c:	f000 8088 	beq.w	8004540 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	330c      	adds	r3, #12
 8004436:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800443e:	e853 3f00 	ldrex	r3, [r3]
 8004442:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004446:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800444a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800444e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	330c      	adds	r3, #12
 8004458:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800445c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004460:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004468:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004474:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1d9      	bne.n	8004430 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3314      	adds	r3, #20
 8004482:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004486:	e853 3f00 	ldrex	r3, [r3]
 800448a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800448c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800448e:	f023 0301 	bic.w	r3, r3, #1
 8004492:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3314      	adds	r3, #20
 800449c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044a0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044a4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e1      	bne.n	800447c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3314      	adds	r3, #20
 80044be:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80044c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3314      	adds	r3, #20
 80044d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80044dc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80044ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e3      	bne.n	80044b8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	330c      	adds	r3, #12
 8004504:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800450e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004510:	f023 0310 	bic.w	r3, r3, #16
 8004514:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	330c      	adds	r3, #12
 800451e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004522:	65ba      	str	r2, [r7, #88]	; 0x58
 8004524:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004526:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004528:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800452a:	e841 2300 	strex	r3, r2, [r1]
 800452e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1e3      	bne.n	80044fe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453a:	4618      	mov	r0, r3
 800453c:	f7fe f85d 	bl	80025fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800454e:	b29b      	uxth	r3, r3
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	b29b      	uxth	r3, r3
 8004554:	4619      	mov	r1, r3
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f8bf 	bl	80046da <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800455c:	e09c      	b.n	8004698 <HAL_UART_IRQHandler+0x518>
 800455e:	bf00      	nop
 8004560:	08004867 	.word	0x08004867
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800456c:	b29b      	uxth	r3, r3
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 808e 	beq.w	800469c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004580:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 8089 	beq.w	800469c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	330c      	adds	r3, #12
 8004590:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800459a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	330c      	adds	r3, #12
 80045aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80045ae:	647a      	str	r2, [r7, #68]	; 0x44
 80045b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045b6:	e841 2300 	strex	r3, r2, [r1]
 80045ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1e3      	bne.n	800458a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3314      	adds	r3, #20
 80045c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	e853 3f00 	ldrex	r3, [r3]
 80045d0:	623b      	str	r3, [r7, #32]
   return(result);
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	f023 0301 	bic.w	r3, r3, #1
 80045d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3314      	adds	r3, #20
 80045e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80045e6:	633a      	str	r2, [r7, #48]	; 0x30
 80045e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ee:	e841 2300 	strex	r3, r2, [r1]
 80045f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1e3      	bne.n	80045c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	330c      	adds	r3, #12
 800460e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	e853 3f00 	ldrex	r3, [r3]
 8004616:	60fb      	str	r3, [r7, #12]
   return(result);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0310 	bic.w	r3, r3, #16
 800461e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	330c      	adds	r3, #12
 8004628:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800462c:	61fa      	str	r2, [r7, #28]
 800462e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004630:	69b9      	ldr	r1, [r7, #24]
 8004632:	69fa      	ldr	r2, [r7, #28]
 8004634:	e841 2300 	strex	r3, r2, [r1]
 8004638:	617b      	str	r3, [r7, #20]
   return(result);
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e3      	bne.n	8004608 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004646:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800464a:	4619      	mov	r1, r3
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f844 	bl	80046da <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004652:	e023      	b.n	800469c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465c:	2b00      	cmp	r3, #0
 800465e:	d009      	beq.n	8004674 <HAL_UART_IRQHandler+0x4f4>
 8004660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f90e 	bl	800488e <UART_Transmit_IT>
    return;
 8004672:	e014      	b.n	800469e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00e      	beq.n	800469e <HAL_UART_IRQHandler+0x51e>
 8004680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d008      	beq.n	800469e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f94d 	bl	800492c <UART_EndTransmit_IT>
    return;
 8004692:	e004      	b.n	800469e <HAL_UART_IRQHandler+0x51e>
    return;
 8004694:	bf00      	nop
 8004696:	e002      	b.n	800469e <HAL_UART_IRQHandler+0x51e>
      return;
 8004698:	bf00      	nop
 800469a:	e000      	b.n	800469e <HAL_UART_IRQHandler+0x51e>
      return;
 800469c:	bf00      	nop
  }
}
 800469e:	37e8      	adds	r7, #232	; 0xe8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr

080046b6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr

080046c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bc80      	pop	{r7}
 80046d8:	4770      	bx	lr

080046da <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	460b      	mov	r3, r1
 80046e4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr

080046f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	4613      	mov	r3, r2
 80046fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004700:	e03b      	b.n	800477a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004708:	d037      	beq.n	800477a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470a:	f7fd fe3b 	bl	8002384 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	6a3a      	ldr	r2, [r7, #32]
 8004716:	429a      	cmp	r2, r3
 8004718:	d302      	bcc.n	8004720 <UART_WaitOnFlagUntilTimeout+0x30>
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e03a      	b.n	800479a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b00      	cmp	r3, #0
 8004730:	d023      	beq.n	800477a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b80      	cmp	r3, #128	; 0x80
 8004736:	d020      	beq.n	800477a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2b40      	cmp	r3, #64	; 0x40
 800473c:	d01d      	beq.n	800477a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b08      	cmp	r3, #8
 800474a:	d116      	bne.n	800477a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 f81d 	bl	80047a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2208      	movs	r2, #8
 800476c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e00f      	b.n	800479a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4013      	ands	r3, r2
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	429a      	cmp	r2, r3
 8004788:	bf0c      	ite	eq
 800478a:	2301      	moveq	r3, #1
 800478c:	2300      	movne	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	461a      	mov	r2, r3
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	429a      	cmp	r2, r3
 8004796:	d0b4      	beq.n	8004702 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b095      	sub	sp, #84	; 0x54
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	330c      	adds	r3, #12
 80047b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b4:	e853 3f00 	ldrex	r3, [r3]
 80047b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	330c      	adds	r3, #12
 80047c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047ca:	643a      	str	r2, [r7, #64]	; 0x40
 80047cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1e5      	bne.n	80047aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3314      	adds	r3, #20
 80047e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	f023 0301 	bic.w	r3, r3, #1
 80047f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3314      	adds	r3, #20
 80047fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004800:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004806:	e841 2300 	strex	r3, r2, [r1]
 800480a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1e5      	bne.n	80047de <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004816:	2b01      	cmp	r3, #1
 8004818:	d119      	bne.n	800484e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	330c      	adds	r3, #12
 8004820:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	60bb      	str	r3, [r7, #8]
   return(result);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f023 0310 	bic.w	r3, r3, #16
 8004830:	647b      	str	r3, [r7, #68]	; 0x44
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	330c      	adds	r3, #12
 8004838:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800483a:	61ba      	str	r2, [r7, #24]
 800483c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483e:	6979      	ldr	r1, [r7, #20]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	e841 2300 	strex	r3, r2, [r1]
 8004846:	613b      	str	r3, [r7, #16]
   return(result);
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1e5      	bne.n	800481a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800485c:	bf00      	nop
 800485e:	3754      	adds	r7, #84	; 0x54
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr

08004866 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b084      	sub	sp, #16
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f7ff ff21 	bl	80046c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004886:	bf00      	nop
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800488e:	b480      	push	{r7}
 8004890:	b085      	sub	sp, #20
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b21      	cmp	r3, #33	; 0x21
 80048a0:	d13e      	bne.n	8004920 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048aa:	d114      	bne.n	80048d6 <UART_Transmit_IT+0x48>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d110      	bne.n	80048d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	1c9a      	adds	r2, r3, #2
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	621a      	str	r2, [r3, #32]
 80048d4:	e008      	b.n	80048e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	1c59      	adds	r1, r3, #1
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6211      	str	r1, [r2, #32]
 80048e0:	781a      	ldrb	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	4619      	mov	r1, r3
 80048f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10f      	bne.n	800491c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800490a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800491a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	e000      	b.n	8004922 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004920:	2302      	movs	r3, #2
  }
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr

0800492c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004942:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7ff fea9 	bl	80046a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08c      	sub	sp, #48	; 0x30
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b22      	cmp	r3, #34	; 0x22
 800496e:	f040 80ae 	bne.w	8004ace <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800497a:	d117      	bne.n	80049ac <UART_Receive_IT+0x50>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d113      	bne.n	80049ac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004984:	2300      	movs	r3, #0
 8004986:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	b29b      	uxth	r3, r3
 8004996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499a:	b29a      	uxth	r2, r3
 800499c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a4:	1c9a      	adds	r2, r3, #2
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	629a      	str	r2, [r3, #40]	; 0x28
 80049aa:	e026      	b.n	80049fa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049be:	d007      	beq.n	80049d0 <UART_Receive_IT+0x74>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10a      	bne.n	80049de <UART_Receive_IT+0x82>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d106      	bne.n	80049de <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049da:	701a      	strb	r2, [r3, #0]
 80049dc:	e008      	b.n	80049f0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	4619      	mov	r1, r3
 8004a08:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d15d      	bne.n	8004aca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0220 	bic.w	r2, r2, #32
 8004a1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695a      	ldr	r2, [r3, #20]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0201 	bic.w	r2, r2, #1
 8004a3c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d135      	bne.n	8004ac0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	330c      	adds	r3, #12
 8004a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	613b      	str	r3, [r7, #16]
   return(result);
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f023 0310 	bic.w	r3, r3, #16
 8004a70:	627b      	str	r3, [r7, #36]	; 0x24
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	330c      	adds	r3, #12
 8004a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7a:	623a      	str	r2, [r7, #32]
 8004a7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	69f9      	ldr	r1, [r7, #28]
 8004a80:	6a3a      	ldr	r2, [r7, #32]
 8004a82:	e841 2300 	strex	r3, r2, [r1]
 8004a86:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1e5      	bne.n	8004a5a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b10      	cmp	r3, #16
 8004a9a:	d10a      	bne.n	8004ab2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7ff fe0e 	bl	80046da <HAL_UARTEx_RxEventCallback>
 8004abe:	e002      	b.n	8004ac6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7ff fdf8 	bl	80046b6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e002      	b.n	8004ad0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	e000      	b.n	8004ad0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ace:	2302      	movs	r3, #2
  }
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3730      	adds	r7, #48	; 0x30
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004b12:	f023 030c 	bic.w	r3, r3, #12
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6812      	ldr	r2, [r2, #0]
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a2c      	ldr	r2, [pc, #176]	; (8004bec <UART_SetConfig+0x114>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d103      	bne.n	8004b48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b40:	f7fe fcb4 	bl	80034ac <HAL_RCC_GetPCLK2Freq>
 8004b44:	60f8      	str	r0, [r7, #12]
 8004b46:	e002      	b.n	8004b4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b48:	f7fe fc9c 	bl	8003484 <HAL_RCC_GetPCLK1Freq>
 8004b4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	009a      	lsls	r2, r3, #2
 8004b58:	441a      	add	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	4a22      	ldr	r2, [pc, #136]	; (8004bf0 <UART_SetConfig+0x118>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	0119      	lsls	r1, r3, #4
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	009a      	lsls	r2, r3, #2
 8004b78:	441a      	add	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b84:	4b1a      	ldr	r3, [pc, #104]	; (8004bf0 <UART_SetConfig+0x118>)
 8004b86:	fba3 0302 	umull	r0, r3, r3, r2
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	2064      	movs	r0, #100	; 0x64
 8004b8e:	fb00 f303 	mul.w	r3, r0, r3
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	3332      	adds	r3, #50	; 0x32
 8004b98:	4a15      	ldr	r2, [pc, #84]	; (8004bf0 <UART_SetConfig+0x118>)
 8004b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba4:	4419      	add	r1, r3
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	009a      	lsls	r2, r3, #2
 8004bb0:	441a      	add	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <UART_SetConfig+0x118>)
 8004bbe:	fba3 0302 	umull	r0, r3, r3, r2
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	2064      	movs	r0, #100	; 0x64
 8004bc6:	fb00 f303 	mul.w	r3, r0, r3
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	3332      	adds	r3, #50	; 0x32
 8004bd0:	4a07      	ldr	r2, [pc, #28]	; (8004bf0 <UART_SetConfig+0x118>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	f003 020f 	and.w	r2, r3, #15
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	440a      	add	r2, r1
 8004be2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004be4:	bf00      	nop
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40013800 	.word	0x40013800
 8004bf0:	51eb851f 	.word	0x51eb851f

08004bf4 <__errno>:
 8004bf4:	4b01      	ldr	r3, [pc, #4]	; (8004bfc <__errno+0x8>)
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	2000006c 	.word	0x2000006c

08004c00 <__libc_init_array>:
 8004c00:	b570      	push	{r4, r5, r6, lr}
 8004c02:	2600      	movs	r6, #0
 8004c04:	4d0c      	ldr	r5, [pc, #48]	; (8004c38 <__libc_init_array+0x38>)
 8004c06:	4c0d      	ldr	r4, [pc, #52]	; (8004c3c <__libc_init_array+0x3c>)
 8004c08:	1b64      	subs	r4, r4, r5
 8004c0a:	10a4      	asrs	r4, r4, #2
 8004c0c:	42a6      	cmp	r6, r4
 8004c0e:	d109      	bne.n	8004c24 <__libc_init_array+0x24>
 8004c10:	f000 fcbc 	bl	800558c <_init>
 8004c14:	2600      	movs	r6, #0
 8004c16:	4d0a      	ldr	r5, [pc, #40]	; (8004c40 <__libc_init_array+0x40>)
 8004c18:	4c0a      	ldr	r4, [pc, #40]	; (8004c44 <__libc_init_array+0x44>)
 8004c1a:	1b64      	subs	r4, r4, r5
 8004c1c:	10a4      	asrs	r4, r4, #2
 8004c1e:	42a6      	cmp	r6, r4
 8004c20:	d105      	bne.n	8004c2e <__libc_init_array+0x2e>
 8004c22:	bd70      	pop	{r4, r5, r6, pc}
 8004c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c28:	4798      	blx	r3
 8004c2a:	3601      	adds	r6, #1
 8004c2c:	e7ee      	b.n	8004c0c <__libc_init_array+0xc>
 8004c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c32:	4798      	blx	r3
 8004c34:	3601      	adds	r6, #1
 8004c36:	e7f2      	b.n	8004c1e <__libc_init_array+0x1e>
 8004c38:	08005754 	.word	0x08005754
 8004c3c:	08005754 	.word	0x08005754
 8004c40:	08005754 	.word	0x08005754
 8004c44:	08005758 	.word	0x08005758

08004c48 <memset>:
 8004c48:	4603      	mov	r3, r0
 8004c4a:	4402      	add	r2, r0
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d100      	bne.n	8004c52 <memset+0xa>
 8004c50:	4770      	bx	lr
 8004c52:	f803 1b01 	strb.w	r1, [r3], #1
 8004c56:	e7f9      	b.n	8004c4c <memset+0x4>

08004c58 <siprintf>:
 8004c58:	b40e      	push	{r1, r2, r3}
 8004c5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c5e:	b500      	push	{lr}
 8004c60:	b09c      	sub	sp, #112	; 0x70
 8004c62:	ab1d      	add	r3, sp, #116	; 0x74
 8004c64:	9002      	str	r0, [sp, #8]
 8004c66:	9006      	str	r0, [sp, #24]
 8004c68:	9107      	str	r1, [sp, #28]
 8004c6a:	9104      	str	r1, [sp, #16]
 8004c6c:	4808      	ldr	r0, [pc, #32]	; (8004c90 <siprintf+0x38>)
 8004c6e:	4909      	ldr	r1, [pc, #36]	; (8004c94 <siprintf+0x3c>)
 8004c70:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c74:	9105      	str	r1, [sp, #20]
 8004c76:	6800      	ldr	r0, [r0, #0]
 8004c78:	a902      	add	r1, sp, #8
 8004c7a:	9301      	str	r3, [sp, #4]
 8004c7c:	f000 f888 	bl	8004d90 <_svfiprintf_r>
 8004c80:	2200      	movs	r2, #0
 8004c82:	9b02      	ldr	r3, [sp, #8]
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	b01c      	add	sp, #112	; 0x70
 8004c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c8c:	b003      	add	sp, #12
 8004c8e:	4770      	bx	lr
 8004c90:	2000006c 	.word	0x2000006c
 8004c94:	ffff0208 	.word	0xffff0208

08004c98 <_vsiprintf_r>:
 8004c98:	b500      	push	{lr}
 8004c9a:	b09b      	sub	sp, #108	; 0x6c
 8004c9c:	9100      	str	r1, [sp, #0]
 8004c9e:	9104      	str	r1, [sp, #16]
 8004ca0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ca4:	9105      	str	r1, [sp, #20]
 8004ca6:	9102      	str	r1, [sp, #8]
 8004ca8:	4905      	ldr	r1, [pc, #20]	; (8004cc0 <_vsiprintf_r+0x28>)
 8004caa:	9103      	str	r1, [sp, #12]
 8004cac:	4669      	mov	r1, sp
 8004cae:	f000 f86f 	bl	8004d90 <_svfiprintf_r>
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	9b00      	ldr	r3, [sp, #0]
 8004cb6:	701a      	strb	r2, [r3, #0]
 8004cb8:	b01b      	add	sp, #108	; 0x6c
 8004cba:	f85d fb04 	ldr.w	pc, [sp], #4
 8004cbe:	bf00      	nop
 8004cc0:	ffff0208 	.word	0xffff0208

08004cc4 <vsiprintf>:
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	460a      	mov	r2, r1
 8004cc8:	4601      	mov	r1, r0
 8004cca:	4802      	ldr	r0, [pc, #8]	; (8004cd4 <vsiprintf+0x10>)
 8004ccc:	6800      	ldr	r0, [r0, #0]
 8004cce:	f7ff bfe3 	b.w	8004c98 <_vsiprintf_r>
 8004cd2:	bf00      	nop
 8004cd4:	2000006c 	.word	0x2000006c

08004cd8 <__ssputs_r>:
 8004cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cdc:	688e      	ldr	r6, [r1, #8]
 8004cde:	4682      	mov	sl, r0
 8004ce0:	429e      	cmp	r6, r3
 8004ce2:	460c      	mov	r4, r1
 8004ce4:	4690      	mov	r8, r2
 8004ce6:	461f      	mov	r7, r3
 8004ce8:	d838      	bhi.n	8004d5c <__ssputs_r+0x84>
 8004cea:	898a      	ldrh	r2, [r1, #12]
 8004cec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004cf0:	d032      	beq.n	8004d58 <__ssputs_r+0x80>
 8004cf2:	6825      	ldr	r5, [r4, #0]
 8004cf4:	6909      	ldr	r1, [r1, #16]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	eba5 0901 	sub.w	r9, r5, r1
 8004cfc:	6965      	ldr	r5, [r4, #20]
 8004cfe:	444b      	add	r3, r9
 8004d00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d08:	106d      	asrs	r5, r5, #1
 8004d0a:	429d      	cmp	r5, r3
 8004d0c:	bf38      	it	cc
 8004d0e:	461d      	movcc	r5, r3
 8004d10:	0553      	lsls	r3, r2, #21
 8004d12:	d531      	bpl.n	8004d78 <__ssputs_r+0xa0>
 8004d14:	4629      	mov	r1, r5
 8004d16:	f000 fb6f 	bl	80053f8 <_malloc_r>
 8004d1a:	4606      	mov	r6, r0
 8004d1c:	b950      	cbnz	r0, 8004d34 <__ssputs_r+0x5c>
 8004d1e:	230c      	movs	r3, #12
 8004d20:	f04f 30ff 	mov.w	r0, #4294967295
 8004d24:	f8ca 3000 	str.w	r3, [sl]
 8004d28:	89a3      	ldrh	r3, [r4, #12]
 8004d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d2e:	81a3      	strh	r3, [r4, #12]
 8004d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d34:	464a      	mov	r2, r9
 8004d36:	6921      	ldr	r1, [r4, #16]
 8004d38:	f000 face 	bl	80052d8 <memcpy>
 8004d3c:	89a3      	ldrh	r3, [r4, #12]
 8004d3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d46:	81a3      	strh	r3, [r4, #12]
 8004d48:	6126      	str	r6, [r4, #16]
 8004d4a:	444e      	add	r6, r9
 8004d4c:	6026      	str	r6, [r4, #0]
 8004d4e:	463e      	mov	r6, r7
 8004d50:	6165      	str	r5, [r4, #20]
 8004d52:	eba5 0509 	sub.w	r5, r5, r9
 8004d56:	60a5      	str	r5, [r4, #8]
 8004d58:	42be      	cmp	r6, r7
 8004d5a:	d900      	bls.n	8004d5e <__ssputs_r+0x86>
 8004d5c:	463e      	mov	r6, r7
 8004d5e:	4632      	mov	r2, r6
 8004d60:	4641      	mov	r1, r8
 8004d62:	6820      	ldr	r0, [r4, #0]
 8004d64:	f000 fac6 	bl	80052f4 <memmove>
 8004d68:	68a3      	ldr	r3, [r4, #8]
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	1b9b      	subs	r3, r3, r6
 8004d6e:	60a3      	str	r3, [r4, #8]
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	4433      	add	r3, r6
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	e7db      	b.n	8004d30 <__ssputs_r+0x58>
 8004d78:	462a      	mov	r2, r5
 8004d7a:	f000 fbb1 	bl	80054e0 <_realloc_r>
 8004d7e:	4606      	mov	r6, r0
 8004d80:	2800      	cmp	r0, #0
 8004d82:	d1e1      	bne.n	8004d48 <__ssputs_r+0x70>
 8004d84:	4650      	mov	r0, sl
 8004d86:	6921      	ldr	r1, [r4, #16]
 8004d88:	f000 face 	bl	8005328 <_free_r>
 8004d8c:	e7c7      	b.n	8004d1e <__ssputs_r+0x46>
	...

08004d90 <_svfiprintf_r>:
 8004d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d94:	4698      	mov	r8, r3
 8004d96:	898b      	ldrh	r3, [r1, #12]
 8004d98:	4607      	mov	r7, r0
 8004d9a:	061b      	lsls	r3, r3, #24
 8004d9c:	460d      	mov	r5, r1
 8004d9e:	4614      	mov	r4, r2
 8004da0:	b09d      	sub	sp, #116	; 0x74
 8004da2:	d50e      	bpl.n	8004dc2 <_svfiprintf_r+0x32>
 8004da4:	690b      	ldr	r3, [r1, #16]
 8004da6:	b963      	cbnz	r3, 8004dc2 <_svfiprintf_r+0x32>
 8004da8:	2140      	movs	r1, #64	; 0x40
 8004daa:	f000 fb25 	bl	80053f8 <_malloc_r>
 8004dae:	6028      	str	r0, [r5, #0]
 8004db0:	6128      	str	r0, [r5, #16]
 8004db2:	b920      	cbnz	r0, 8004dbe <_svfiprintf_r+0x2e>
 8004db4:	230c      	movs	r3, #12
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbc:	e0d1      	b.n	8004f62 <_svfiprintf_r+0x1d2>
 8004dbe:	2340      	movs	r3, #64	; 0x40
 8004dc0:	616b      	str	r3, [r5, #20]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8004dc6:	2320      	movs	r3, #32
 8004dc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dcc:	2330      	movs	r3, #48	; 0x30
 8004dce:	f04f 0901 	mov.w	r9, #1
 8004dd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dd6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004f7c <_svfiprintf_r+0x1ec>
 8004dda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dde:	4623      	mov	r3, r4
 8004de0:	469a      	mov	sl, r3
 8004de2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004de6:	b10a      	cbz	r2, 8004dec <_svfiprintf_r+0x5c>
 8004de8:	2a25      	cmp	r2, #37	; 0x25
 8004dea:	d1f9      	bne.n	8004de0 <_svfiprintf_r+0x50>
 8004dec:	ebba 0b04 	subs.w	fp, sl, r4
 8004df0:	d00b      	beq.n	8004e0a <_svfiprintf_r+0x7a>
 8004df2:	465b      	mov	r3, fp
 8004df4:	4622      	mov	r2, r4
 8004df6:	4629      	mov	r1, r5
 8004df8:	4638      	mov	r0, r7
 8004dfa:	f7ff ff6d 	bl	8004cd8 <__ssputs_r>
 8004dfe:	3001      	adds	r0, #1
 8004e00:	f000 80aa 	beq.w	8004f58 <_svfiprintf_r+0x1c8>
 8004e04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e06:	445a      	add	r2, fp
 8004e08:	9209      	str	r2, [sp, #36]	; 0x24
 8004e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 80a2 	beq.w	8004f58 <_svfiprintf_r+0x1c8>
 8004e14:	2300      	movs	r3, #0
 8004e16:	f04f 32ff 	mov.w	r2, #4294967295
 8004e1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e1e:	f10a 0a01 	add.w	sl, sl, #1
 8004e22:	9304      	str	r3, [sp, #16]
 8004e24:	9307      	str	r3, [sp, #28]
 8004e26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e2a:	931a      	str	r3, [sp, #104]	; 0x68
 8004e2c:	4654      	mov	r4, sl
 8004e2e:	2205      	movs	r2, #5
 8004e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e34:	4851      	ldr	r0, [pc, #324]	; (8004f7c <_svfiprintf_r+0x1ec>)
 8004e36:	f000 fa41 	bl	80052bc <memchr>
 8004e3a:	9a04      	ldr	r2, [sp, #16]
 8004e3c:	b9d8      	cbnz	r0, 8004e76 <_svfiprintf_r+0xe6>
 8004e3e:	06d0      	lsls	r0, r2, #27
 8004e40:	bf44      	itt	mi
 8004e42:	2320      	movmi	r3, #32
 8004e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e48:	0711      	lsls	r1, r2, #28
 8004e4a:	bf44      	itt	mi
 8004e4c:	232b      	movmi	r3, #43	; 0x2b
 8004e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e52:	f89a 3000 	ldrb.w	r3, [sl]
 8004e56:	2b2a      	cmp	r3, #42	; 0x2a
 8004e58:	d015      	beq.n	8004e86 <_svfiprintf_r+0xf6>
 8004e5a:	4654      	mov	r4, sl
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	f04f 0c0a 	mov.w	ip, #10
 8004e62:	9a07      	ldr	r2, [sp, #28]
 8004e64:	4621      	mov	r1, r4
 8004e66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e6a:	3b30      	subs	r3, #48	; 0x30
 8004e6c:	2b09      	cmp	r3, #9
 8004e6e:	d94e      	bls.n	8004f0e <_svfiprintf_r+0x17e>
 8004e70:	b1b0      	cbz	r0, 8004ea0 <_svfiprintf_r+0x110>
 8004e72:	9207      	str	r2, [sp, #28]
 8004e74:	e014      	b.n	8004ea0 <_svfiprintf_r+0x110>
 8004e76:	eba0 0308 	sub.w	r3, r0, r8
 8004e7a:	fa09 f303 	lsl.w	r3, r9, r3
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	46a2      	mov	sl, r4
 8004e82:	9304      	str	r3, [sp, #16]
 8004e84:	e7d2      	b.n	8004e2c <_svfiprintf_r+0x9c>
 8004e86:	9b03      	ldr	r3, [sp, #12]
 8004e88:	1d19      	adds	r1, r3, #4
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	9103      	str	r1, [sp, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	bfbb      	ittet	lt
 8004e92:	425b      	neglt	r3, r3
 8004e94:	f042 0202 	orrlt.w	r2, r2, #2
 8004e98:	9307      	strge	r3, [sp, #28]
 8004e9a:	9307      	strlt	r3, [sp, #28]
 8004e9c:	bfb8      	it	lt
 8004e9e:	9204      	strlt	r2, [sp, #16]
 8004ea0:	7823      	ldrb	r3, [r4, #0]
 8004ea2:	2b2e      	cmp	r3, #46	; 0x2e
 8004ea4:	d10c      	bne.n	8004ec0 <_svfiprintf_r+0x130>
 8004ea6:	7863      	ldrb	r3, [r4, #1]
 8004ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8004eaa:	d135      	bne.n	8004f18 <_svfiprintf_r+0x188>
 8004eac:	9b03      	ldr	r3, [sp, #12]
 8004eae:	3402      	adds	r4, #2
 8004eb0:	1d1a      	adds	r2, r3, #4
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	9203      	str	r2, [sp, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	bfb8      	it	lt
 8004eba:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ebe:	9305      	str	r3, [sp, #20]
 8004ec0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004f80 <_svfiprintf_r+0x1f0>
 8004ec4:	2203      	movs	r2, #3
 8004ec6:	4650      	mov	r0, sl
 8004ec8:	7821      	ldrb	r1, [r4, #0]
 8004eca:	f000 f9f7 	bl	80052bc <memchr>
 8004ece:	b140      	cbz	r0, 8004ee2 <_svfiprintf_r+0x152>
 8004ed0:	2340      	movs	r3, #64	; 0x40
 8004ed2:	eba0 000a 	sub.w	r0, r0, sl
 8004ed6:	fa03 f000 	lsl.w	r0, r3, r0
 8004eda:	9b04      	ldr	r3, [sp, #16]
 8004edc:	3401      	adds	r4, #1
 8004ede:	4303      	orrs	r3, r0
 8004ee0:	9304      	str	r3, [sp, #16]
 8004ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ee6:	2206      	movs	r2, #6
 8004ee8:	4826      	ldr	r0, [pc, #152]	; (8004f84 <_svfiprintf_r+0x1f4>)
 8004eea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004eee:	f000 f9e5 	bl	80052bc <memchr>
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d038      	beq.n	8004f68 <_svfiprintf_r+0x1d8>
 8004ef6:	4b24      	ldr	r3, [pc, #144]	; (8004f88 <_svfiprintf_r+0x1f8>)
 8004ef8:	bb1b      	cbnz	r3, 8004f42 <_svfiprintf_r+0x1b2>
 8004efa:	9b03      	ldr	r3, [sp, #12]
 8004efc:	3307      	adds	r3, #7
 8004efe:	f023 0307 	bic.w	r3, r3, #7
 8004f02:	3308      	adds	r3, #8
 8004f04:	9303      	str	r3, [sp, #12]
 8004f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f08:	4433      	add	r3, r6
 8004f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f0c:	e767      	b.n	8004dde <_svfiprintf_r+0x4e>
 8004f0e:	460c      	mov	r4, r1
 8004f10:	2001      	movs	r0, #1
 8004f12:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f16:	e7a5      	b.n	8004e64 <_svfiprintf_r+0xd4>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f04f 0c0a 	mov.w	ip, #10
 8004f1e:	4619      	mov	r1, r3
 8004f20:	3401      	adds	r4, #1
 8004f22:	9305      	str	r3, [sp, #20]
 8004f24:	4620      	mov	r0, r4
 8004f26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f2a:	3a30      	subs	r2, #48	; 0x30
 8004f2c:	2a09      	cmp	r2, #9
 8004f2e:	d903      	bls.n	8004f38 <_svfiprintf_r+0x1a8>
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0c5      	beq.n	8004ec0 <_svfiprintf_r+0x130>
 8004f34:	9105      	str	r1, [sp, #20]
 8004f36:	e7c3      	b.n	8004ec0 <_svfiprintf_r+0x130>
 8004f38:	4604      	mov	r4, r0
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f40:	e7f0      	b.n	8004f24 <_svfiprintf_r+0x194>
 8004f42:	ab03      	add	r3, sp, #12
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	462a      	mov	r2, r5
 8004f48:	4638      	mov	r0, r7
 8004f4a:	4b10      	ldr	r3, [pc, #64]	; (8004f8c <_svfiprintf_r+0x1fc>)
 8004f4c:	a904      	add	r1, sp, #16
 8004f4e:	f3af 8000 	nop.w
 8004f52:	1c42      	adds	r2, r0, #1
 8004f54:	4606      	mov	r6, r0
 8004f56:	d1d6      	bne.n	8004f06 <_svfiprintf_r+0x176>
 8004f58:	89ab      	ldrh	r3, [r5, #12]
 8004f5a:	065b      	lsls	r3, r3, #25
 8004f5c:	f53f af2c 	bmi.w	8004db8 <_svfiprintf_r+0x28>
 8004f60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f62:	b01d      	add	sp, #116	; 0x74
 8004f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f68:	ab03      	add	r3, sp, #12
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	462a      	mov	r2, r5
 8004f6e:	4638      	mov	r0, r7
 8004f70:	4b06      	ldr	r3, [pc, #24]	; (8004f8c <_svfiprintf_r+0x1fc>)
 8004f72:	a904      	add	r1, sp, #16
 8004f74:	f000 f87c 	bl	8005070 <_printf_i>
 8004f78:	e7eb      	b.n	8004f52 <_svfiprintf_r+0x1c2>
 8004f7a:	bf00      	nop
 8004f7c:	0800571e 	.word	0x0800571e
 8004f80:	08005724 	.word	0x08005724
 8004f84:	08005728 	.word	0x08005728
 8004f88:	00000000 	.word	0x00000000
 8004f8c:	08004cd9 	.word	0x08004cd9

08004f90 <_printf_common>:
 8004f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f94:	4616      	mov	r6, r2
 8004f96:	4699      	mov	r9, r3
 8004f98:	688a      	ldr	r2, [r1, #8]
 8004f9a:	690b      	ldr	r3, [r1, #16]
 8004f9c:	4607      	mov	r7, r0
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	bfb8      	it	lt
 8004fa2:	4613      	movlt	r3, r2
 8004fa4:	6033      	str	r3, [r6, #0]
 8004fa6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004faa:	460c      	mov	r4, r1
 8004fac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fb0:	b10a      	cbz	r2, 8004fb6 <_printf_common+0x26>
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	6033      	str	r3, [r6, #0]
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	0699      	lsls	r1, r3, #26
 8004fba:	bf42      	ittt	mi
 8004fbc:	6833      	ldrmi	r3, [r6, #0]
 8004fbe:	3302      	addmi	r3, #2
 8004fc0:	6033      	strmi	r3, [r6, #0]
 8004fc2:	6825      	ldr	r5, [r4, #0]
 8004fc4:	f015 0506 	ands.w	r5, r5, #6
 8004fc8:	d106      	bne.n	8004fd8 <_printf_common+0x48>
 8004fca:	f104 0a19 	add.w	sl, r4, #25
 8004fce:	68e3      	ldr	r3, [r4, #12]
 8004fd0:	6832      	ldr	r2, [r6, #0]
 8004fd2:	1a9b      	subs	r3, r3, r2
 8004fd4:	42ab      	cmp	r3, r5
 8004fd6:	dc28      	bgt.n	800502a <_printf_common+0x9a>
 8004fd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fdc:	1e13      	subs	r3, r2, #0
 8004fde:	6822      	ldr	r2, [r4, #0]
 8004fe0:	bf18      	it	ne
 8004fe2:	2301      	movne	r3, #1
 8004fe4:	0692      	lsls	r2, r2, #26
 8004fe6:	d42d      	bmi.n	8005044 <_printf_common+0xb4>
 8004fe8:	4649      	mov	r1, r9
 8004fea:	4638      	mov	r0, r7
 8004fec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ff0:	47c0      	blx	r8
 8004ff2:	3001      	adds	r0, #1
 8004ff4:	d020      	beq.n	8005038 <_printf_common+0xa8>
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	68e5      	ldr	r5, [r4, #12]
 8004ffa:	f003 0306 	and.w	r3, r3, #6
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	bf18      	it	ne
 8005002:	2500      	movne	r5, #0
 8005004:	6832      	ldr	r2, [r6, #0]
 8005006:	f04f 0600 	mov.w	r6, #0
 800500a:	68a3      	ldr	r3, [r4, #8]
 800500c:	bf08      	it	eq
 800500e:	1aad      	subeq	r5, r5, r2
 8005010:	6922      	ldr	r2, [r4, #16]
 8005012:	bf08      	it	eq
 8005014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005018:	4293      	cmp	r3, r2
 800501a:	bfc4      	itt	gt
 800501c:	1a9b      	subgt	r3, r3, r2
 800501e:	18ed      	addgt	r5, r5, r3
 8005020:	341a      	adds	r4, #26
 8005022:	42b5      	cmp	r5, r6
 8005024:	d11a      	bne.n	800505c <_printf_common+0xcc>
 8005026:	2000      	movs	r0, #0
 8005028:	e008      	b.n	800503c <_printf_common+0xac>
 800502a:	2301      	movs	r3, #1
 800502c:	4652      	mov	r2, sl
 800502e:	4649      	mov	r1, r9
 8005030:	4638      	mov	r0, r7
 8005032:	47c0      	blx	r8
 8005034:	3001      	adds	r0, #1
 8005036:	d103      	bne.n	8005040 <_printf_common+0xb0>
 8005038:	f04f 30ff 	mov.w	r0, #4294967295
 800503c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005040:	3501      	adds	r5, #1
 8005042:	e7c4      	b.n	8004fce <_printf_common+0x3e>
 8005044:	2030      	movs	r0, #48	; 0x30
 8005046:	18e1      	adds	r1, r4, r3
 8005048:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005052:	4422      	add	r2, r4
 8005054:	3302      	adds	r3, #2
 8005056:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800505a:	e7c5      	b.n	8004fe8 <_printf_common+0x58>
 800505c:	2301      	movs	r3, #1
 800505e:	4622      	mov	r2, r4
 8005060:	4649      	mov	r1, r9
 8005062:	4638      	mov	r0, r7
 8005064:	47c0      	blx	r8
 8005066:	3001      	adds	r0, #1
 8005068:	d0e6      	beq.n	8005038 <_printf_common+0xa8>
 800506a:	3601      	adds	r6, #1
 800506c:	e7d9      	b.n	8005022 <_printf_common+0x92>
	...

08005070 <_printf_i>:
 8005070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005074:	7e0f      	ldrb	r7, [r1, #24]
 8005076:	4691      	mov	r9, r2
 8005078:	2f78      	cmp	r7, #120	; 0x78
 800507a:	4680      	mov	r8, r0
 800507c:	460c      	mov	r4, r1
 800507e:	469a      	mov	sl, r3
 8005080:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005082:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005086:	d807      	bhi.n	8005098 <_printf_i+0x28>
 8005088:	2f62      	cmp	r7, #98	; 0x62
 800508a:	d80a      	bhi.n	80050a2 <_printf_i+0x32>
 800508c:	2f00      	cmp	r7, #0
 800508e:	f000 80d9 	beq.w	8005244 <_printf_i+0x1d4>
 8005092:	2f58      	cmp	r7, #88	; 0x58
 8005094:	f000 80a4 	beq.w	80051e0 <_printf_i+0x170>
 8005098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800509c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050a0:	e03a      	b.n	8005118 <_printf_i+0xa8>
 80050a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050a6:	2b15      	cmp	r3, #21
 80050a8:	d8f6      	bhi.n	8005098 <_printf_i+0x28>
 80050aa:	a101      	add	r1, pc, #4	; (adr r1, 80050b0 <_printf_i+0x40>)
 80050ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050b0:	08005109 	.word	0x08005109
 80050b4:	0800511d 	.word	0x0800511d
 80050b8:	08005099 	.word	0x08005099
 80050bc:	08005099 	.word	0x08005099
 80050c0:	08005099 	.word	0x08005099
 80050c4:	08005099 	.word	0x08005099
 80050c8:	0800511d 	.word	0x0800511d
 80050cc:	08005099 	.word	0x08005099
 80050d0:	08005099 	.word	0x08005099
 80050d4:	08005099 	.word	0x08005099
 80050d8:	08005099 	.word	0x08005099
 80050dc:	0800522b 	.word	0x0800522b
 80050e0:	0800514d 	.word	0x0800514d
 80050e4:	0800520d 	.word	0x0800520d
 80050e8:	08005099 	.word	0x08005099
 80050ec:	08005099 	.word	0x08005099
 80050f0:	0800524d 	.word	0x0800524d
 80050f4:	08005099 	.word	0x08005099
 80050f8:	0800514d 	.word	0x0800514d
 80050fc:	08005099 	.word	0x08005099
 8005100:	08005099 	.word	0x08005099
 8005104:	08005215 	.word	0x08005215
 8005108:	682b      	ldr	r3, [r5, #0]
 800510a:	1d1a      	adds	r2, r3, #4
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	602a      	str	r2, [r5, #0]
 8005110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005118:	2301      	movs	r3, #1
 800511a:	e0a4      	b.n	8005266 <_printf_i+0x1f6>
 800511c:	6820      	ldr	r0, [r4, #0]
 800511e:	6829      	ldr	r1, [r5, #0]
 8005120:	0606      	lsls	r6, r0, #24
 8005122:	f101 0304 	add.w	r3, r1, #4
 8005126:	d50a      	bpl.n	800513e <_printf_i+0xce>
 8005128:	680e      	ldr	r6, [r1, #0]
 800512a:	602b      	str	r3, [r5, #0]
 800512c:	2e00      	cmp	r6, #0
 800512e:	da03      	bge.n	8005138 <_printf_i+0xc8>
 8005130:	232d      	movs	r3, #45	; 0x2d
 8005132:	4276      	negs	r6, r6
 8005134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005138:	230a      	movs	r3, #10
 800513a:	485e      	ldr	r0, [pc, #376]	; (80052b4 <_printf_i+0x244>)
 800513c:	e019      	b.n	8005172 <_printf_i+0x102>
 800513e:	680e      	ldr	r6, [r1, #0]
 8005140:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005144:	602b      	str	r3, [r5, #0]
 8005146:	bf18      	it	ne
 8005148:	b236      	sxthne	r6, r6
 800514a:	e7ef      	b.n	800512c <_printf_i+0xbc>
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	6820      	ldr	r0, [r4, #0]
 8005150:	1d19      	adds	r1, r3, #4
 8005152:	6029      	str	r1, [r5, #0]
 8005154:	0601      	lsls	r1, r0, #24
 8005156:	d501      	bpl.n	800515c <_printf_i+0xec>
 8005158:	681e      	ldr	r6, [r3, #0]
 800515a:	e002      	b.n	8005162 <_printf_i+0xf2>
 800515c:	0646      	lsls	r6, r0, #25
 800515e:	d5fb      	bpl.n	8005158 <_printf_i+0xe8>
 8005160:	881e      	ldrh	r6, [r3, #0]
 8005162:	2f6f      	cmp	r7, #111	; 0x6f
 8005164:	bf0c      	ite	eq
 8005166:	2308      	moveq	r3, #8
 8005168:	230a      	movne	r3, #10
 800516a:	4852      	ldr	r0, [pc, #328]	; (80052b4 <_printf_i+0x244>)
 800516c:	2100      	movs	r1, #0
 800516e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005172:	6865      	ldr	r5, [r4, #4]
 8005174:	2d00      	cmp	r5, #0
 8005176:	bfa8      	it	ge
 8005178:	6821      	ldrge	r1, [r4, #0]
 800517a:	60a5      	str	r5, [r4, #8]
 800517c:	bfa4      	itt	ge
 800517e:	f021 0104 	bicge.w	r1, r1, #4
 8005182:	6021      	strge	r1, [r4, #0]
 8005184:	b90e      	cbnz	r6, 800518a <_printf_i+0x11a>
 8005186:	2d00      	cmp	r5, #0
 8005188:	d04d      	beq.n	8005226 <_printf_i+0x1b6>
 800518a:	4615      	mov	r5, r2
 800518c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005190:	fb03 6711 	mls	r7, r3, r1, r6
 8005194:	5dc7      	ldrb	r7, [r0, r7]
 8005196:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800519a:	4637      	mov	r7, r6
 800519c:	42bb      	cmp	r3, r7
 800519e:	460e      	mov	r6, r1
 80051a0:	d9f4      	bls.n	800518c <_printf_i+0x11c>
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	d10b      	bne.n	80051be <_printf_i+0x14e>
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	07de      	lsls	r6, r3, #31
 80051aa:	d508      	bpl.n	80051be <_printf_i+0x14e>
 80051ac:	6923      	ldr	r3, [r4, #16]
 80051ae:	6861      	ldr	r1, [r4, #4]
 80051b0:	4299      	cmp	r1, r3
 80051b2:	bfde      	ittt	le
 80051b4:	2330      	movle	r3, #48	; 0x30
 80051b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051be:	1b52      	subs	r2, r2, r5
 80051c0:	6122      	str	r2, [r4, #16]
 80051c2:	464b      	mov	r3, r9
 80051c4:	4621      	mov	r1, r4
 80051c6:	4640      	mov	r0, r8
 80051c8:	f8cd a000 	str.w	sl, [sp]
 80051cc:	aa03      	add	r2, sp, #12
 80051ce:	f7ff fedf 	bl	8004f90 <_printf_common>
 80051d2:	3001      	adds	r0, #1
 80051d4:	d14c      	bne.n	8005270 <_printf_i+0x200>
 80051d6:	f04f 30ff 	mov.w	r0, #4294967295
 80051da:	b004      	add	sp, #16
 80051dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e0:	4834      	ldr	r0, [pc, #208]	; (80052b4 <_printf_i+0x244>)
 80051e2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80051e6:	6829      	ldr	r1, [r5, #0]
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	f851 6b04 	ldr.w	r6, [r1], #4
 80051ee:	6029      	str	r1, [r5, #0]
 80051f0:	061d      	lsls	r5, r3, #24
 80051f2:	d514      	bpl.n	800521e <_printf_i+0x1ae>
 80051f4:	07df      	lsls	r7, r3, #31
 80051f6:	bf44      	itt	mi
 80051f8:	f043 0320 	orrmi.w	r3, r3, #32
 80051fc:	6023      	strmi	r3, [r4, #0]
 80051fe:	b91e      	cbnz	r6, 8005208 <_printf_i+0x198>
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	f023 0320 	bic.w	r3, r3, #32
 8005206:	6023      	str	r3, [r4, #0]
 8005208:	2310      	movs	r3, #16
 800520a:	e7af      	b.n	800516c <_printf_i+0xfc>
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	f043 0320 	orr.w	r3, r3, #32
 8005212:	6023      	str	r3, [r4, #0]
 8005214:	2378      	movs	r3, #120	; 0x78
 8005216:	4828      	ldr	r0, [pc, #160]	; (80052b8 <_printf_i+0x248>)
 8005218:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800521c:	e7e3      	b.n	80051e6 <_printf_i+0x176>
 800521e:	0659      	lsls	r1, r3, #25
 8005220:	bf48      	it	mi
 8005222:	b2b6      	uxthmi	r6, r6
 8005224:	e7e6      	b.n	80051f4 <_printf_i+0x184>
 8005226:	4615      	mov	r5, r2
 8005228:	e7bb      	b.n	80051a2 <_printf_i+0x132>
 800522a:	682b      	ldr	r3, [r5, #0]
 800522c:	6826      	ldr	r6, [r4, #0]
 800522e:	1d18      	adds	r0, r3, #4
 8005230:	6961      	ldr	r1, [r4, #20]
 8005232:	6028      	str	r0, [r5, #0]
 8005234:	0635      	lsls	r5, r6, #24
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	d501      	bpl.n	800523e <_printf_i+0x1ce>
 800523a:	6019      	str	r1, [r3, #0]
 800523c:	e002      	b.n	8005244 <_printf_i+0x1d4>
 800523e:	0670      	lsls	r0, r6, #25
 8005240:	d5fb      	bpl.n	800523a <_printf_i+0x1ca>
 8005242:	8019      	strh	r1, [r3, #0]
 8005244:	2300      	movs	r3, #0
 8005246:	4615      	mov	r5, r2
 8005248:	6123      	str	r3, [r4, #16]
 800524a:	e7ba      	b.n	80051c2 <_printf_i+0x152>
 800524c:	682b      	ldr	r3, [r5, #0]
 800524e:	2100      	movs	r1, #0
 8005250:	1d1a      	adds	r2, r3, #4
 8005252:	602a      	str	r2, [r5, #0]
 8005254:	681d      	ldr	r5, [r3, #0]
 8005256:	6862      	ldr	r2, [r4, #4]
 8005258:	4628      	mov	r0, r5
 800525a:	f000 f82f 	bl	80052bc <memchr>
 800525e:	b108      	cbz	r0, 8005264 <_printf_i+0x1f4>
 8005260:	1b40      	subs	r0, r0, r5
 8005262:	6060      	str	r0, [r4, #4]
 8005264:	6863      	ldr	r3, [r4, #4]
 8005266:	6123      	str	r3, [r4, #16]
 8005268:	2300      	movs	r3, #0
 800526a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800526e:	e7a8      	b.n	80051c2 <_printf_i+0x152>
 8005270:	462a      	mov	r2, r5
 8005272:	4649      	mov	r1, r9
 8005274:	4640      	mov	r0, r8
 8005276:	6923      	ldr	r3, [r4, #16]
 8005278:	47d0      	blx	sl
 800527a:	3001      	adds	r0, #1
 800527c:	d0ab      	beq.n	80051d6 <_printf_i+0x166>
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	079b      	lsls	r3, r3, #30
 8005282:	d413      	bmi.n	80052ac <_printf_i+0x23c>
 8005284:	68e0      	ldr	r0, [r4, #12]
 8005286:	9b03      	ldr	r3, [sp, #12]
 8005288:	4298      	cmp	r0, r3
 800528a:	bfb8      	it	lt
 800528c:	4618      	movlt	r0, r3
 800528e:	e7a4      	b.n	80051da <_printf_i+0x16a>
 8005290:	2301      	movs	r3, #1
 8005292:	4632      	mov	r2, r6
 8005294:	4649      	mov	r1, r9
 8005296:	4640      	mov	r0, r8
 8005298:	47d0      	blx	sl
 800529a:	3001      	adds	r0, #1
 800529c:	d09b      	beq.n	80051d6 <_printf_i+0x166>
 800529e:	3501      	adds	r5, #1
 80052a0:	68e3      	ldr	r3, [r4, #12]
 80052a2:	9903      	ldr	r1, [sp, #12]
 80052a4:	1a5b      	subs	r3, r3, r1
 80052a6:	42ab      	cmp	r3, r5
 80052a8:	dcf2      	bgt.n	8005290 <_printf_i+0x220>
 80052aa:	e7eb      	b.n	8005284 <_printf_i+0x214>
 80052ac:	2500      	movs	r5, #0
 80052ae:	f104 0619 	add.w	r6, r4, #25
 80052b2:	e7f5      	b.n	80052a0 <_printf_i+0x230>
 80052b4:	0800572f 	.word	0x0800572f
 80052b8:	08005740 	.word	0x08005740

080052bc <memchr>:
 80052bc:	4603      	mov	r3, r0
 80052be:	b510      	push	{r4, lr}
 80052c0:	b2c9      	uxtb	r1, r1
 80052c2:	4402      	add	r2, r0
 80052c4:	4293      	cmp	r3, r2
 80052c6:	4618      	mov	r0, r3
 80052c8:	d101      	bne.n	80052ce <memchr+0x12>
 80052ca:	2000      	movs	r0, #0
 80052cc:	e003      	b.n	80052d6 <memchr+0x1a>
 80052ce:	7804      	ldrb	r4, [r0, #0]
 80052d0:	3301      	adds	r3, #1
 80052d2:	428c      	cmp	r4, r1
 80052d4:	d1f6      	bne.n	80052c4 <memchr+0x8>
 80052d6:	bd10      	pop	{r4, pc}

080052d8 <memcpy>:
 80052d8:	440a      	add	r2, r1
 80052da:	4291      	cmp	r1, r2
 80052dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80052e0:	d100      	bne.n	80052e4 <memcpy+0xc>
 80052e2:	4770      	bx	lr
 80052e4:	b510      	push	{r4, lr}
 80052e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052ea:	4291      	cmp	r1, r2
 80052ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052f0:	d1f9      	bne.n	80052e6 <memcpy+0xe>
 80052f2:	bd10      	pop	{r4, pc}

080052f4 <memmove>:
 80052f4:	4288      	cmp	r0, r1
 80052f6:	b510      	push	{r4, lr}
 80052f8:	eb01 0402 	add.w	r4, r1, r2
 80052fc:	d902      	bls.n	8005304 <memmove+0x10>
 80052fe:	4284      	cmp	r4, r0
 8005300:	4623      	mov	r3, r4
 8005302:	d807      	bhi.n	8005314 <memmove+0x20>
 8005304:	1e43      	subs	r3, r0, #1
 8005306:	42a1      	cmp	r1, r4
 8005308:	d008      	beq.n	800531c <memmove+0x28>
 800530a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800530e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005312:	e7f8      	b.n	8005306 <memmove+0x12>
 8005314:	4601      	mov	r1, r0
 8005316:	4402      	add	r2, r0
 8005318:	428a      	cmp	r2, r1
 800531a:	d100      	bne.n	800531e <memmove+0x2a>
 800531c:	bd10      	pop	{r4, pc}
 800531e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005322:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005326:	e7f7      	b.n	8005318 <memmove+0x24>

08005328 <_free_r>:
 8005328:	b538      	push	{r3, r4, r5, lr}
 800532a:	4605      	mov	r5, r0
 800532c:	2900      	cmp	r1, #0
 800532e:	d040      	beq.n	80053b2 <_free_r+0x8a>
 8005330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005334:	1f0c      	subs	r4, r1, #4
 8005336:	2b00      	cmp	r3, #0
 8005338:	bfb8      	it	lt
 800533a:	18e4      	addlt	r4, r4, r3
 800533c:	f000 f910 	bl	8005560 <__malloc_lock>
 8005340:	4a1c      	ldr	r2, [pc, #112]	; (80053b4 <_free_r+0x8c>)
 8005342:	6813      	ldr	r3, [r2, #0]
 8005344:	b933      	cbnz	r3, 8005354 <_free_r+0x2c>
 8005346:	6063      	str	r3, [r4, #4]
 8005348:	6014      	str	r4, [r2, #0]
 800534a:	4628      	mov	r0, r5
 800534c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005350:	f000 b90c 	b.w	800556c <__malloc_unlock>
 8005354:	42a3      	cmp	r3, r4
 8005356:	d908      	bls.n	800536a <_free_r+0x42>
 8005358:	6820      	ldr	r0, [r4, #0]
 800535a:	1821      	adds	r1, r4, r0
 800535c:	428b      	cmp	r3, r1
 800535e:	bf01      	itttt	eq
 8005360:	6819      	ldreq	r1, [r3, #0]
 8005362:	685b      	ldreq	r3, [r3, #4]
 8005364:	1809      	addeq	r1, r1, r0
 8005366:	6021      	streq	r1, [r4, #0]
 8005368:	e7ed      	b.n	8005346 <_free_r+0x1e>
 800536a:	461a      	mov	r2, r3
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	b10b      	cbz	r3, 8005374 <_free_r+0x4c>
 8005370:	42a3      	cmp	r3, r4
 8005372:	d9fa      	bls.n	800536a <_free_r+0x42>
 8005374:	6811      	ldr	r1, [r2, #0]
 8005376:	1850      	adds	r0, r2, r1
 8005378:	42a0      	cmp	r0, r4
 800537a:	d10b      	bne.n	8005394 <_free_r+0x6c>
 800537c:	6820      	ldr	r0, [r4, #0]
 800537e:	4401      	add	r1, r0
 8005380:	1850      	adds	r0, r2, r1
 8005382:	4283      	cmp	r3, r0
 8005384:	6011      	str	r1, [r2, #0]
 8005386:	d1e0      	bne.n	800534a <_free_r+0x22>
 8005388:	6818      	ldr	r0, [r3, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	4401      	add	r1, r0
 800538e:	6011      	str	r1, [r2, #0]
 8005390:	6053      	str	r3, [r2, #4]
 8005392:	e7da      	b.n	800534a <_free_r+0x22>
 8005394:	d902      	bls.n	800539c <_free_r+0x74>
 8005396:	230c      	movs	r3, #12
 8005398:	602b      	str	r3, [r5, #0]
 800539a:	e7d6      	b.n	800534a <_free_r+0x22>
 800539c:	6820      	ldr	r0, [r4, #0]
 800539e:	1821      	adds	r1, r4, r0
 80053a0:	428b      	cmp	r3, r1
 80053a2:	bf01      	itttt	eq
 80053a4:	6819      	ldreq	r1, [r3, #0]
 80053a6:	685b      	ldreq	r3, [r3, #4]
 80053a8:	1809      	addeq	r1, r1, r0
 80053aa:	6021      	streq	r1, [r4, #0]
 80053ac:	6063      	str	r3, [r4, #4]
 80053ae:	6054      	str	r4, [r2, #4]
 80053b0:	e7cb      	b.n	800534a <_free_r+0x22>
 80053b2:	bd38      	pop	{r3, r4, r5, pc}
 80053b4:	20000634 	.word	0x20000634

080053b8 <sbrk_aligned>:
 80053b8:	b570      	push	{r4, r5, r6, lr}
 80053ba:	4e0e      	ldr	r6, [pc, #56]	; (80053f4 <sbrk_aligned+0x3c>)
 80053bc:	460c      	mov	r4, r1
 80053be:	6831      	ldr	r1, [r6, #0]
 80053c0:	4605      	mov	r5, r0
 80053c2:	b911      	cbnz	r1, 80053ca <sbrk_aligned+0x12>
 80053c4:	f000 f8bc 	bl	8005540 <_sbrk_r>
 80053c8:	6030      	str	r0, [r6, #0]
 80053ca:	4621      	mov	r1, r4
 80053cc:	4628      	mov	r0, r5
 80053ce:	f000 f8b7 	bl	8005540 <_sbrk_r>
 80053d2:	1c43      	adds	r3, r0, #1
 80053d4:	d00a      	beq.n	80053ec <sbrk_aligned+0x34>
 80053d6:	1cc4      	adds	r4, r0, #3
 80053d8:	f024 0403 	bic.w	r4, r4, #3
 80053dc:	42a0      	cmp	r0, r4
 80053de:	d007      	beq.n	80053f0 <sbrk_aligned+0x38>
 80053e0:	1a21      	subs	r1, r4, r0
 80053e2:	4628      	mov	r0, r5
 80053e4:	f000 f8ac 	bl	8005540 <_sbrk_r>
 80053e8:	3001      	adds	r0, #1
 80053ea:	d101      	bne.n	80053f0 <sbrk_aligned+0x38>
 80053ec:	f04f 34ff 	mov.w	r4, #4294967295
 80053f0:	4620      	mov	r0, r4
 80053f2:	bd70      	pop	{r4, r5, r6, pc}
 80053f4:	20000638 	.word	0x20000638

080053f8 <_malloc_r>:
 80053f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053fc:	1ccd      	adds	r5, r1, #3
 80053fe:	f025 0503 	bic.w	r5, r5, #3
 8005402:	3508      	adds	r5, #8
 8005404:	2d0c      	cmp	r5, #12
 8005406:	bf38      	it	cc
 8005408:	250c      	movcc	r5, #12
 800540a:	2d00      	cmp	r5, #0
 800540c:	4607      	mov	r7, r0
 800540e:	db01      	blt.n	8005414 <_malloc_r+0x1c>
 8005410:	42a9      	cmp	r1, r5
 8005412:	d905      	bls.n	8005420 <_malloc_r+0x28>
 8005414:	230c      	movs	r3, #12
 8005416:	2600      	movs	r6, #0
 8005418:	603b      	str	r3, [r7, #0]
 800541a:	4630      	mov	r0, r6
 800541c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005420:	4e2e      	ldr	r6, [pc, #184]	; (80054dc <_malloc_r+0xe4>)
 8005422:	f000 f89d 	bl	8005560 <__malloc_lock>
 8005426:	6833      	ldr	r3, [r6, #0]
 8005428:	461c      	mov	r4, r3
 800542a:	bb34      	cbnz	r4, 800547a <_malloc_r+0x82>
 800542c:	4629      	mov	r1, r5
 800542e:	4638      	mov	r0, r7
 8005430:	f7ff ffc2 	bl	80053b8 <sbrk_aligned>
 8005434:	1c43      	adds	r3, r0, #1
 8005436:	4604      	mov	r4, r0
 8005438:	d14d      	bne.n	80054d6 <_malloc_r+0xde>
 800543a:	6834      	ldr	r4, [r6, #0]
 800543c:	4626      	mov	r6, r4
 800543e:	2e00      	cmp	r6, #0
 8005440:	d140      	bne.n	80054c4 <_malloc_r+0xcc>
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	4631      	mov	r1, r6
 8005446:	4638      	mov	r0, r7
 8005448:	eb04 0803 	add.w	r8, r4, r3
 800544c:	f000 f878 	bl	8005540 <_sbrk_r>
 8005450:	4580      	cmp	r8, r0
 8005452:	d13a      	bne.n	80054ca <_malloc_r+0xd2>
 8005454:	6821      	ldr	r1, [r4, #0]
 8005456:	3503      	adds	r5, #3
 8005458:	1a6d      	subs	r5, r5, r1
 800545a:	f025 0503 	bic.w	r5, r5, #3
 800545e:	3508      	adds	r5, #8
 8005460:	2d0c      	cmp	r5, #12
 8005462:	bf38      	it	cc
 8005464:	250c      	movcc	r5, #12
 8005466:	4638      	mov	r0, r7
 8005468:	4629      	mov	r1, r5
 800546a:	f7ff ffa5 	bl	80053b8 <sbrk_aligned>
 800546e:	3001      	adds	r0, #1
 8005470:	d02b      	beq.n	80054ca <_malloc_r+0xd2>
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	442b      	add	r3, r5
 8005476:	6023      	str	r3, [r4, #0]
 8005478:	e00e      	b.n	8005498 <_malloc_r+0xa0>
 800547a:	6822      	ldr	r2, [r4, #0]
 800547c:	1b52      	subs	r2, r2, r5
 800547e:	d41e      	bmi.n	80054be <_malloc_r+0xc6>
 8005480:	2a0b      	cmp	r2, #11
 8005482:	d916      	bls.n	80054b2 <_malloc_r+0xba>
 8005484:	1961      	adds	r1, r4, r5
 8005486:	42a3      	cmp	r3, r4
 8005488:	6025      	str	r5, [r4, #0]
 800548a:	bf18      	it	ne
 800548c:	6059      	strne	r1, [r3, #4]
 800548e:	6863      	ldr	r3, [r4, #4]
 8005490:	bf08      	it	eq
 8005492:	6031      	streq	r1, [r6, #0]
 8005494:	5162      	str	r2, [r4, r5]
 8005496:	604b      	str	r3, [r1, #4]
 8005498:	4638      	mov	r0, r7
 800549a:	f104 060b 	add.w	r6, r4, #11
 800549e:	f000 f865 	bl	800556c <__malloc_unlock>
 80054a2:	f026 0607 	bic.w	r6, r6, #7
 80054a6:	1d23      	adds	r3, r4, #4
 80054a8:	1af2      	subs	r2, r6, r3
 80054aa:	d0b6      	beq.n	800541a <_malloc_r+0x22>
 80054ac:	1b9b      	subs	r3, r3, r6
 80054ae:	50a3      	str	r3, [r4, r2]
 80054b0:	e7b3      	b.n	800541a <_malloc_r+0x22>
 80054b2:	6862      	ldr	r2, [r4, #4]
 80054b4:	42a3      	cmp	r3, r4
 80054b6:	bf0c      	ite	eq
 80054b8:	6032      	streq	r2, [r6, #0]
 80054ba:	605a      	strne	r2, [r3, #4]
 80054bc:	e7ec      	b.n	8005498 <_malloc_r+0xa0>
 80054be:	4623      	mov	r3, r4
 80054c0:	6864      	ldr	r4, [r4, #4]
 80054c2:	e7b2      	b.n	800542a <_malloc_r+0x32>
 80054c4:	4634      	mov	r4, r6
 80054c6:	6876      	ldr	r6, [r6, #4]
 80054c8:	e7b9      	b.n	800543e <_malloc_r+0x46>
 80054ca:	230c      	movs	r3, #12
 80054cc:	4638      	mov	r0, r7
 80054ce:	603b      	str	r3, [r7, #0]
 80054d0:	f000 f84c 	bl	800556c <__malloc_unlock>
 80054d4:	e7a1      	b.n	800541a <_malloc_r+0x22>
 80054d6:	6025      	str	r5, [r4, #0]
 80054d8:	e7de      	b.n	8005498 <_malloc_r+0xa0>
 80054da:	bf00      	nop
 80054dc:	20000634 	.word	0x20000634

080054e0 <_realloc_r>:
 80054e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054e4:	4680      	mov	r8, r0
 80054e6:	4614      	mov	r4, r2
 80054e8:	460e      	mov	r6, r1
 80054ea:	b921      	cbnz	r1, 80054f6 <_realloc_r+0x16>
 80054ec:	4611      	mov	r1, r2
 80054ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054f2:	f7ff bf81 	b.w	80053f8 <_malloc_r>
 80054f6:	b92a      	cbnz	r2, 8005504 <_realloc_r+0x24>
 80054f8:	f7ff ff16 	bl	8005328 <_free_r>
 80054fc:	4625      	mov	r5, r4
 80054fe:	4628      	mov	r0, r5
 8005500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005504:	f000 f838 	bl	8005578 <_malloc_usable_size_r>
 8005508:	4284      	cmp	r4, r0
 800550a:	4607      	mov	r7, r0
 800550c:	d802      	bhi.n	8005514 <_realloc_r+0x34>
 800550e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005512:	d812      	bhi.n	800553a <_realloc_r+0x5a>
 8005514:	4621      	mov	r1, r4
 8005516:	4640      	mov	r0, r8
 8005518:	f7ff ff6e 	bl	80053f8 <_malloc_r>
 800551c:	4605      	mov	r5, r0
 800551e:	2800      	cmp	r0, #0
 8005520:	d0ed      	beq.n	80054fe <_realloc_r+0x1e>
 8005522:	42bc      	cmp	r4, r7
 8005524:	4622      	mov	r2, r4
 8005526:	4631      	mov	r1, r6
 8005528:	bf28      	it	cs
 800552a:	463a      	movcs	r2, r7
 800552c:	f7ff fed4 	bl	80052d8 <memcpy>
 8005530:	4631      	mov	r1, r6
 8005532:	4640      	mov	r0, r8
 8005534:	f7ff fef8 	bl	8005328 <_free_r>
 8005538:	e7e1      	b.n	80054fe <_realloc_r+0x1e>
 800553a:	4635      	mov	r5, r6
 800553c:	e7df      	b.n	80054fe <_realloc_r+0x1e>
	...

08005540 <_sbrk_r>:
 8005540:	b538      	push	{r3, r4, r5, lr}
 8005542:	2300      	movs	r3, #0
 8005544:	4d05      	ldr	r5, [pc, #20]	; (800555c <_sbrk_r+0x1c>)
 8005546:	4604      	mov	r4, r0
 8005548:	4608      	mov	r0, r1
 800554a:	602b      	str	r3, [r5, #0]
 800554c:	f7fc fe60 	bl	8002210 <_sbrk>
 8005550:	1c43      	adds	r3, r0, #1
 8005552:	d102      	bne.n	800555a <_sbrk_r+0x1a>
 8005554:	682b      	ldr	r3, [r5, #0]
 8005556:	b103      	cbz	r3, 800555a <_sbrk_r+0x1a>
 8005558:	6023      	str	r3, [r4, #0]
 800555a:	bd38      	pop	{r3, r4, r5, pc}
 800555c:	2000063c 	.word	0x2000063c

08005560 <__malloc_lock>:
 8005560:	4801      	ldr	r0, [pc, #4]	; (8005568 <__malloc_lock+0x8>)
 8005562:	f000 b811 	b.w	8005588 <__retarget_lock_acquire_recursive>
 8005566:	bf00      	nop
 8005568:	20000640 	.word	0x20000640

0800556c <__malloc_unlock>:
 800556c:	4801      	ldr	r0, [pc, #4]	; (8005574 <__malloc_unlock+0x8>)
 800556e:	f000 b80c 	b.w	800558a <__retarget_lock_release_recursive>
 8005572:	bf00      	nop
 8005574:	20000640 	.word	0x20000640

08005578 <_malloc_usable_size_r>:
 8005578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800557c:	1f18      	subs	r0, r3, #4
 800557e:	2b00      	cmp	r3, #0
 8005580:	bfbc      	itt	lt
 8005582:	580b      	ldrlt	r3, [r1, r0]
 8005584:	18c0      	addlt	r0, r0, r3
 8005586:	4770      	bx	lr

08005588 <__retarget_lock_acquire_recursive>:
 8005588:	4770      	bx	lr

0800558a <__retarget_lock_release_recursive>:
 800558a:	4770      	bx	lr

0800558c <_init>:
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558e:	bf00      	nop
 8005590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005592:	bc08      	pop	{r3}
 8005594:	469e      	mov	lr, r3
 8005596:	4770      	bx	lr

08005598 <_fini>:
 8005598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559a:	bf00      	nop
 800559c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800559e:	bc08      	pop	{r3}
 80055a0:	469e      	mov	lr, r3
 80055a2:	4770      	bx	lr
